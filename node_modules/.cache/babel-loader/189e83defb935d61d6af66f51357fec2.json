{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { createTextVNode as _createTextVNode, createVNode as _createVNode, Fragment as _Fragment } from \"vue\"; // Styles\n\nimport \"./VSelect.css\"; // Components\n\nimport { VChip } from \"../VChip/index.mjs\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.mjs\";\nimport { VList, VListItem } from \"../VList/index.mjs\";\nimport { VMenu } from \"../VMenu/index.mjs\";\nimport { VTextField } from \"../VTextField/index.mjs\"; // Composables\n\nimport { makeTransitionProps } from \"../../composables/transition.mjs\";\nimport { useForwardRef } from \"../../composables/forwardRef.mjs\";\nimport { useLocale } from \"../../composables/locale.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utility\n\nimport { computed, ref, watch } from 'vue';\nimport { genericComponent, propsFactory, useRender, wrapInArray } from \"../../util/index.mjs\"; // Types\n\nexport function genItem(item) {\n  var _ref;\n\n  return {\n    title: String((_ref = typeof item === 'object' ? item.title : item) != null ? _ref : ''),\n    value: typeof item === 'object' ? item.value : item\n  };\n}\nexport const makeSelectProps = propsFactory({\n  chips: Boolean,\n  closableChips: Boolean,\n  eager: Boolean,\n  hideNoData: Boolean,\n  hideSelected: Boolean,\n  items: {\n    type: Array,\n    default: () => []\n  },\n  menuIcon: {\n    type: String,\n    default: '$dropdown'\n  },\n  modelValue: {\n    type: [Number, String, Array],\n    default: () => []\n  },\n  multiple: Boolean,\n  noDataText: {\n    type: String,\n    default: '$vuetify.noDataText'\n  },\n  openOnClear: Boolean\n}, 'select');\nexport const VSelect = genericComponent()({\n  name: 'VSelect',\n  props: { ...makeSelectProps(),\n    ...makeTransitionProps({\n      transition: 'scale-transition'\n    })\n  },\n  emits: {\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref2) {\n    let {\n      slots\n    } = _ref2;\n    const {\n      t\n    } = useLocale();\n    const vTextFieldRef = ref();\n    const activator = ref();\n    const menu = ref(false);\n    const items = computed(() => props.items.map(genItem));\n    const model = useProxiedModel(props, 'modelValue', [], v => wrapInArray(v), v => props.multiple ? v : v[0]);\n    const selections = computed(() => items.value.filter(item => model.value.includes(item.value)));\n    const selected = computed(() => selections.value.map(selection => selection.value));\n\n    function onClear(e) {\n      model.value = [];\n\n      if (props.openOnClear) {\n        menu.value = true;\n      }\n    }\n\n    function onClickControl() {\n      if (props.hideNoData && !items.value.length) return;\n      menu.value = true;\n    }\n\n    function onKeydown(e) {\n      if (['Enter', 'ArrowDown', ' '].includes(e.key)) {\n        menu.value = true;\n      }\n\n      if (['Escape', 'Tab'].includes(e.key)) {\n        menu.value = false;\n      }\n    }\n\n    function select(item) {\n      if (props.multiple) {\n        const index = selected.value.findIndex(selection => selection === item.value);\n\n        if (index === -1) {\n          model.value = [...model.value, item.value];\n        } else {\n          const value = [...model.value];\n          value.splice(index, 1);\n          model.value = value;\n        }\n      } else {\n        model.value = [item.value];\n        menu.value = false;\n      }\n    }\n\n    watch(() => vTextFieldRef.value, val => {\n      activator.value = val.$el.querySelector('.v-input__control');\n    });\n    useRender(() => {\n      const hasChips = !!(props.chips || slots.chip);\n      return _createVNode(VTextField, {\n        \"ref\": vTextFieldRef,\n        \"class\": ['v-select', {\n          'v-select--active-menu': menu.value,\n          'v-select--chips': !!props.chips,\n          [`v-select--${props.multiple ? 'multiple' : 'single'}`]: true\n        }],\n        \"appendInnerIcon\": props.menuIcon,\n        \"readonly\": true,\n        \"onClick:clear\": onClear,\n        \"onClick:input\": onClickControl,\n        \"onClick:control\": onClickControl,\n        \"onBlur\": () => menu.value = false,\n        \"modelValue\": model.value.join(', '),\n        \"onKeydown\": onKeydown\n      }, { ...slots,\n        default: () => {\n          var _slots$noData, _slots$noData2;\n\n          return _createVNode(_Fragment, null, [activator.value && _createVNode(VMenu, {\n            \"modelValue\": menu.value,\n            \"onUpdate:modelValue\": $event => menu.value = $event,\n            \"activator\": activator.value,\n            \"contentClass\": \"v-select__content\",\n            \"eager\": props.eager,\n            \"openOnClick\": false,\n            \"transition\": props.transition\n          }, {\n            default: () => [_createVNode(VList, {\n              \"selected\": selected.value,\n              \"selectStrategy\": props.multiple ? 'independent' : 'single-independent'\n            }, {\n              default: () => [!items.value.length && !props.hideNoData && ((_slots$noData = (_slots$noData2 = slots['no-data']) == null ? void 0 : _slots$noData2.call(slots)) != null ? _slots$noData : _createVNode(VListItem, {\n                \"title\": t(props.noDataText)\n              }, null)), items.value.map(item => _createVNode(VListItem, {\n                \"title\": item.title,\n                \"value\": item.value,\n                \"onMousedown\": e => e.preventDefault(),\n                \"onClick\": () => select(item)\n              }, null))]\n            })]\n          }), selections.value.map((selection, index) => {\n            function onChipClose(e) {\n              e.stopPropagation();\n              e.preventDefault();\n              select(selection);\n            }\n\n            const slotProps = {\n              'onClick:close': onChipClose,\n              modelValue: true\n            };\n            return _createVNode(\"div\", {\n              \"class\": \"v-select__selection\"\n            }, [hasChips && _createVNode(VDefaultsProvider, {\n              \"defaults\": {\n                VChip: {\n                  closable: props.closableChips,\n                  size: 'small',\n                  text: selection.title\n                }\n              }\n            }, {\n              default: () => [slots.chip ? slots.chip({\n                props: slotProps,\n                selection\n              }) : _createVNode(VChip, slotProps, null)]\n            }), !hasChips && (slots.selection ? slots.selection({\n              selection\n            }) : _createVNode(\"span\", {\n              \"class\": \"v-select__selection-text\"\n            }, [selection.title, props.multiple && index < selections.value.length - 1 && _createVNode(\"span\", {\n              \"class\": \"v-select__selection-comma\"\n            }, [_createTextVNode(\",\")])]))]);\n          })]);\n        }\n      });\n    });\n    return useForwardRef({}, vTextFieldRef);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VChip","VDefaultsProvider","VList","VListItem","VMenu","VTextField","makeTransitionProps","useForwardRef","useLocale","useProxiedModel","computed","ref","watch","genericComponent","propsFactory","useRender","wrapInArray","genItem","item","title","String","value","makeSelectProps","chips","Boolean","closableChips","eager","hideNoData","hideSelected","items","type","Array","default","menuIcon","modelValue","Number","multiple","noDataText","openOnClear","VSelect","name","props","transition","emits","val","setup","slots","_ref2","t","vTextFieldRef","activator","menu","map","model","v","selections","filter","includes","selected","selection","onClear","e","onClickControl","length","onKeydown","key","select","index","findIndex","splice","$el","querySelector","hasChips","chip","join","$event","_slots$noData2","preventDefault","onChipClose","stopPropagation","slotProps","closable","size","text"],"sources":["../../../src/components/VSelect/VSelect.tsx"],"sourcesContent":["// Styles\nimport './VSelect.sass'\n\n// Components\nimport { VChip } from '@/components/VChip'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VList, VListItem } from '@/components/VList'\nimport { VMenu } from '@/components/VMenu'\nimport { VTextField } from '@/components/VTextField'\n\n// Composables\nimport { makeTransitionProps } from '@/composables/transition'\nimport { useForwardRef } from '@/composables/forwardRef'\nimport { useLocale } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utility\nimport { computed, ref, watch } from 'vue'\nimport { genericComponent, propsFactory, useRender, wrapInArray } from '@/util'\n\n// Types\nimport type { LinkProps } from '@/composables/router'\nimport type { MakeSlots } from '@/util'\nimport type { PropType } from 'vue'\n\nexport interface InternalSelectItem {\n  title: string\n  value: any\n  index: number\n}\n\nexport interface DefaultSelectionSlot {\n  selection: InternalSelectItem\n}\n\nexport interface DefaultChipSlot extends DefaultSelectionSlot {\n  props: {\n    'onClick:close': (e: Event) => void\n    modelValue: any\n  }\n}\n\nexport type SelectItem = string | (string | number)[] | ((item: Record<string, any>, fallback?: any) => any) | (LinkProps & {\n  text: string\n})\n\nexport function genItem (item: any) {\n  return {\n    title: String((typeof item === 'object' ? item.title : item) ?? ''),\n    value: (typeof item === 'object' ? item.value : item),\n  }\n}\n\nexport const makeSelectProps = propsFactory({\n  chips: Boolean,\n  closableChips: Boolean,\n  eager: Boolean,\n  hideNoData: Boolean,\n  hideSelected: Boolean,\n  items: {\n    type: Array as PropType<SelectItem[]>,\n    default: () => ([]),\n  },\n  menuIcon: {\n    type: String,\n    default: '$dropdown',\n  },\n  modelValue: {\n    type: [Number, String, Array],\n    default: () => ([]),\n  },\n  multiple: Boolean,\n  noDataText: {\n    type: String,\n    default: '$vuetify.noDataText',\n  },\n  openOnClear: Boolean,\n}, 'select')\n\nexport const VSelect = genericComponent<new <T>() => {\n  $slots: MakeSlots<{\n    chip: [DefaultChipSlot]\n    default: []\n    selection: [DefaultSelectionSlot]\n  }>\n}>()({\n  name: 'VSelect',\n\n  props: {\n    ...makeSelectProps(),\n    ...makeTransitionProps({ transition: 'scale-transition' }),\n  },\n\n  emits: {\n    'update:modelValue': (val: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const { t } = useLocale()\n    const vTextFieldRef = ref()\n    const activator = ref()\n    const menu = ref(false)\n    const items = computed(() => props.items.map(genItem))\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      [],\n      v => wrapInArray(v),\n      (v: any) => props.multiple ? v : v[0]\n    )\n    const selections = computed(() => items.value.filter(item => model.value.includes(item.value)))\n    const selected = computed(() => selections.value.map(selection => selection.value))\n\n    function onClear (e: MouseEvent) {\n      model.value = []\n\n      if (props.openOnClear) {\n        menu.value = true\n      }\n    }\n    function onClickControl () {\n      if (props.hideNoData && !items.value.length) return\n\n      menu.value = true\n    }\n    function onKeydown (e: KeyboardEvent) {\n      if (['Enter', 'ArrowDown', ' '].includes(e.key)) {\n        menu.value = true\n      }\n\n      if (['Escape', 'Tab'].includes(e.key)) {\n        menu.value = false\n      }\n    }\n    function select (item: any) {\n      if (props.multiple) {\n        const index = selected.value.findIndex(selection => selection === item.value)\n\n        if (index === -1) {\n          model.value = [...model.value, item.value]\n        } else {\n          const value = [...model.value]\n          value.splice(index, 1)\n          model.value = value\n        }\n      } else {\n        model.value = [item.value]\n        menu.value = false\n      }\n    }\n\n    watch(() => vTextFieldRef.value, val => {\n      activator.value = val.$el.querySelector('.v-input__control')\n    })\n\n    useRender(() => {\n      const hasChips = !!(props.chips || slots.chip)\n\n      return (\n        <VTextField\n          ref={ vTextFieldRef }\n          class={[\n            'v-select',\n            {\n              'v-select--active-menu': menu.value,\n              'v-select--chips': !!props.chips,\n              [`v-select--${props.multiple ? 'multiple' : 'single'}`]: true,\n            },\n          ]}\n          appendInnerIcon={ props.menuIcon }\n          readonly\n          onClick:clear={ onClear }\n          onClick:input={ onClickControl }\n          onClick:control={ onClickControl }\n          onBlur={ () => menu.value = false }\n          modelValue={ model.value.join(', ') }\n          onKeydown={ onKeydown }\n        >\n          {{\n            ...slots,\n            default: () => (\n              <>\n                { activator.value && (\n                  <VMenu\n                    v-model={ menu.value }\n                    activator={ activator.value }\n                    contentClass=\"v-select__content\"\n                    eager={ props.eager }\n                    openOnClick={ false }\n                    transition={ props.transition }\n                  >\n                    <VList\n                      selected={ selected.value }\n                      selectStrategy={ props.multiple ? 'independent' : 'single-independent' }\n                    >\n                      { !items.value.length && !props.hideNoData && (slots['no-data']?.() ?? (\n                        <VListItem title={ t(props.noDataText) } />\n                      )) }\n\n                      { items.value.map(item => (\n                        <VListItem\n                          title={ item.title }\n                          value={ item.value }\n                          onMousedown={ (e: MouseEvent) => e.preventDefault() }\n                          onClick={ () => select(item) }\n                        />\n                      )) }\n                    </VList>\n                  </VMenu>\n                ) }\n\n                { selections.value.map((selection, index) => {\n                  function onChipClose (e: Event) {\n                    e.stopPropagation()\n                    e.preventDefault()\n\n                    select(selection)\n                  }\n\n                  const slotProps = {\n                    'onClick:close': onChipClose,\n                    modelValue: true,\n                  }\n\n                  return (\n                    <div class=\"v-select__selection\">\n                      { hasChips && (\n                        <VDefaultsProvider\n                          defaults={{\n                            VChip: {\n                              closable: props.closableChips,\n                              size: 'small',\n                              text: selection.title,\n                            },\n                          }}\n                        >\n                          { slots.chip\n                            ? slots.chip({ props: slotProps, selection })\n                            : (<VChip { ...slotProps } />)\n                          }\n                        </VDefaultsProvider>\n                      ) }\n\n                      { !hasChips && (\n                        slots.selection\n                          ? slots.selection({ selection })\n                          : (\n                            <span class=\"v-select__selection-text\">\n                              { selection.title }\n                              { props.multiple && (index < selections.value.length - 1) && (\n                                <span class=\"v-select__selection-comma\">,</span>\n                              ) }\n                            </span>\n                          )\n                      ) }\n                    </div>\n                  )\n                }) }\n              </>\n            ),\n          }}\n        </VTextField>\n      )\n    })\n\n    return useForwardRef({}, vTextFieldRef)\n  },\n})\n\nexport type VSelect = InstanceType<typeof VSelect>\n"]},"metadata":{},"sourceType":"module"}