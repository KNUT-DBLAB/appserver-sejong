{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  name: 'SignupForm',\n\n  data() {\n    return {\n      dialog: false,\n      state: 'ins',\n      authList: [{\n        name: '관리자',\n        value: 'A'\n      }, {\n        name: '일반 사용자',\n        value: 'M'\n      }],\n      c_email: '',\n      emailRules: [v => !!v || '이메일은 필수 입력사항입니다.', v => /.+@.+/.test(v) || '유효하지 않은 형식의 E-mail 입니다.'],\n      c_name: '',\n      c_name_rule: [v => !!v || '이름은 필수 입력사항입니다.', v => !(v && v.length >= 10) || '이름은 10자 이상 입력할 수 없습니다.', v => !/[~!@#$%^&*()_+|<>?:{}]/.test(v) || '이름에는 특수문자를 사용할 수 없습니다.'],\n      c_passwd: '',\n      c_passwd_chk: '',\n      c_passwd_rule: [v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true, v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.'],\n      c_passwd_rule2: [v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true, v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.', v => v === this.c_passwd || '패스워드가 일치하지 않습니다.'],\n      user_auth: '',\n      user_auth_rule: [v => !!v || '권한은 필수 선택 사항입니다.'],\n      c_phonenum: '',\n      c_phonenum_rule: [v => this.state === 'ins' ? !!v || '핸드폰 번호는 필수 입력사항입니다.' : true, v => !(v && v.length >= 12) || '핸드폰 번호는 12자 이상 입력할 수 업습니다.', v => /[0-9]/.test(v) || '숫자만 입력해주세요']\n    };\n  },\n\n  methods: {\n    existEmail(c_email) {\n      const validate = this.$refs.form.validate();\n      console.log(c_email);\n      this.$store.dispatch('existEmail', c_email);\n    },\n\n    signupConsumer(signupObj) {\n      const validate = this.$refs.form.validate(); // if (validate){\n      //     const params = {\n      //     c_name: this.c_name,\n      // \tc_email: this.c_email,\n      // \tc_passwd: this.c_passwd,\n      // \tc_phonenum: this.c_phonenum\n      //     }\n      //     } else {\n      //     this.state == 'upd' \n      //     params._id = this.user_info._id;\n      //     params.user_mk_dt = this.user_info.user_mk_dt;\n      //     console.log(dkdltl)\n      //     }\n\n      console.log(this.$store.state.existEmail);\n\n      if (this.$store.state.existEmail) {\n        alert('이메일 중복 확인을 완료해주세요!');\n      } else {\n        console.log(signupObj);\n        axios.post('http://localhost:8080/api/signupConsumer', signupObj).then(res => {\n          console.log(res);\n\n          if (res.data == 0) {\n            alert(\"회원가입 실패..\");\n          } else {\n            alert(\"회원가입 성공..\"); // main으로 넘기기\n\n            console.log(\"main으로!!\");\n            console.log(this.token);\n            console.log(res.data.token);\n            this.token = res.data.token;\n            this.$router.push({\n              name: 'main',\n              params: this.token\n            });\n          }\n        }).catch(err => {\n          console.log(err);\n        });\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["axios","name","data","dialog","state","authList","value","c_email","emailRules","v","test","c_name","c_name_rule","length","c_passwd","c_passwd_chk","c_passwd_rule","c_passwd_rule2","user_auth","user_auth_rule","c_phonenum","c_phonenum_rule","methods","existEmail","validate","$refs","form","console","log","$store","dispatch","signupConsumer","signupObj","alert","post","then","res","token","$router","push","params","catch","err"],"sourceRoot":"","sources":["/home/realvue/src/views/test.vue"],"sourcesContent":["<template>\n<header class=\"welcome-header\">\n    <h1 class=\"welcome-header__title\">회 원 가 입</h1>\n</header>\n    <v-form ref=\"form\" lazy-validation @submit.prevent=\"SignupForm\">\n        <v-row>\n            <v-col cols=\"12\">\n            <v-text-field v-model=\"c_name\" label=\"이름*\" :rules=\"c_name_rule\" required></v-text-field>\n            </v-col>\n            <v-col cols=\"12\">\n                <v-text-field v-model=\"c_email\" label=\"이메일*\" :rules=\"emailRules\"\n                    :disabled=\"state == 'ins' ? false : true\" required></v-text-field>\n            </v-col>\n\n            <button class=\"login-form__btn_right\" @click=\"existEmail(c_email)\">이메일 중복 검사</button>\n\n            <v-col cols=\"12\">\n                <v-text-field v-model=\"c_passwd\" label=\"비밀번호*\" type=\"password\" :rules=\"c_passwd_rule\"></v-text-field>\n            </v-col>\n            <v-col cols=\"12\">\n                <v-text-field v-model=\"c_passwd_chk\" label=\"비밀번호 확인*\" type=\"password\" :rules=\"c_passwd_rule2\">\n                </v-text-field>\n            </v-col>\n            <v-col cols=\"12\">\n                <v-text-field v-model=\"c_phonenum\" label=\"핸드폰 번호\" :rules=\"c_phonenum_rule\"></v-text-field>\n            </v-col>\n            <v-col cols=\"12\">\n                <v-select v-model=\"user_auth\" label=\"권한*\" :items=\"authList\" item-text=\"name\" item-value=\"value\"\n                    return-object :rules=\"user_auth_rule\"></v-select>\n            </v-col>\n        </v-row>\n\n        <button class=\"login-form__btn_right\"\n            @click=\"signupConsumer({c_name, c_email, c_passwd, c_phonenum})\">다음</button>\n    </v-form>\n</template>\n\n\n<script>\nimport axios from \"axios\"\n\nexport default {\n    name: 'SignupForm',\n    data() {\n        return {\n            dialog: false,\n            state: 'ins',\n            authList: [\n                { name: '관리자', value: 'A' },\n                { name: '일반 사용자', value: 'M' }\n            ],\n            c_email: '',\n            emailRules: [\n                v => !!v || '이메일은 필수 입력사항입니다.',\n                v => /.+@.+/.test(v) || '유효하지 않은 형식의 E-mail 입니다.',\n            ],\n            c_name: '',\n            c_name_rule: [\n                v => !!v || '이름은 필수 입력사항입니다.',\n                v => !(v && v.length >= 10) || '이름은 10자 이상 입력할 수 없습니다.',\n                v => !/[~!@#$%^&*()_+|<>?:{}]/.test(v) || '이름에는 특수문자를 사용할 수 없습니다.'\n            ],\n            c_passwd: '',\n            c_passwd_chk: '',\n            c_passwd_rule: [\n                v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true,\n                v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.',\n            ],\n            c_passwd_rule2: [\n                v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true,\n                v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.',\n                v => v === this.c_passwd || '패스워드가 일치하지 않습니다.'\n            ],\n            user_auth: '',\n            user_auth_rule: [\n                v => !!v || '권한은 필수 선택 사항입니다.'\n            ],\n            c_phonenum: '',\n            c_phonenum_rule: [\n                v => this.state === 'ins' ? !!v || '핸드폰 번호는 필수 입력사항입니다.' : true,\n                v => !(v && v.length >= 12) || '핸드폰 번호는 12자 이상 입력할 수 업습니다.',\n                v => /[0-9]/.test(v) || '숫자만 입력해주세요'\n            ] \n        }\n    },\n    methods:{\n    existEmail(c_email) {\n        const validate = this.$refs.form.validate(); \n        console.log(c_email);\n        this.$store.dispatch('existEmail', c_email)\n    },\n\n    signupConsumer(signupObj) {\n        const validate = this.$refs.form.validate();\n        // if (validate){\n        //     const params = {\n        //     c_name: this.c_name,\n\t\t// \tc_email: this.c_email,\n\t\t// \tc_passwd: this.c_passwd,\n\t\t// \tc_phonenum: this.c_phonenum\n        //     }\n        //     } else {\n        //     this.state == 'upd' \n        //     params._id = this.user_info._id;\n        //     params.user_mk_dt = this.user_info.user_mk_dt;\n        //     console.log(dkdltl)\n        //     }\n        console.log(this.$store.state.existEmail);\n        if (this.$store.state.existEmail) {\n            alert('이메일 중복 확인을 완료해주세요!')\n        } else {\n            console.log(signupObj);\n            axios.post('http://localhost:8080/api/signupConsumer', signupObj)\n                .then(res => {\n                    console.log(res);\n                    if (res.data == 0) {\n                        alert(\"회원가입 실패..\")\n                    } else {\n                        alert(\"회원가입 성공..\")\n                        // main으로 넘기기\n                        console.log(\"main으로!!\");\n                        console.log(this.token);\n                        console.log(res.data.token);\n                        this.token = res.data.token;\n                        this.$router.push({ name: 'main', params: this.token });\n                    }\n                })\n                .catch(err => {\n                    console.log(err);\n                });\n        }\n       \n    }\n}\n}\n\n</script>\n\n\n\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module"}