{"ast":null,"code":"import Stomp from 'webstomp-client';\nimport SockJS from 'sockjs-client';\nexport default {\n  name: 'App',\n\n  data() {\n    return {\n      title: \"\",\n      content: \"\",\n      recvList: []\n    };\n  },\n\n  created() {\n    // App.vue가 생성되면 소켓 연결을 시도합니다.\n    this.connect();\n  },\n\n  methods: {\n    sendcontent(e) {\n      console.log(\"keyup: \" + e.keyCode);\n\n      if (e.keyCode === 13 && this.title !== '' && this.content !== '') {\n        this.send();\n        this.send2();\n        this.content = '';\n      }\n    },\n\n    send() {\n      console.log(\"Send content:\" + this.content);\n      console.log(this.stompClient);\n      console.log(this.stompClient.connected);\n\n      if (this.stompClient && this.stompClient.connected) {\n        const msg = {\n          title: this.title,\n          content: this.content\n        };\n        this.stompClient.send(\"/receive\", JSON.stringify(msg), {});\n      }\n    },\n\n    send2() {\n      console.log(\"Send content2222222:\" + this.content);\n\n      if (this.stompClient && this.stompClient.connected) {\n        const msg = {\n          title: this.title,\n          content: this.content\n        };\n        this.stompClient.send(\"/receive2\", JSON.stringify(msg), {});\n      }\n    },\n\n    connect() {\n      const serverURL = \"http://localhost:8080/socket\";\n      let socket = new SockJS(serverURL);\n      this.stompClient = Stomp.over(socket);\n      console.log(`소켓 연결을 시도합니다. 서버 주소: ${serverURL}`);\n      this.stompClient.connect({}, frame => {\n        // 소켓 연결 성공\n        this.connected = true;\n        console.log('소켓 연결 성공', frame); // 서버의 메시지 전송 endpoint를 구독합니다.\n        // 이런형태를 pub sub 구조라고 합니다.\n\n        this.stompClient.subscribe(\"/send\", res => {\n          console.log('구독으로 받은 메시지 입니다.', res.body); // 받은 데이터를 json으로 파싱하고 리스트에 넣어줍니다.\n\n          this.recvList.push(JSON.parse(res.body));\n        });\n        this.stompClient.subscribe(\"/send2\", res => {\n          console.log('222222222222', res.body);\n        });\n      }, error => {\n        // 소켓 연결 실패\n        console.log('소켓 연결 실패', error);\n        this.connected = false;\n      });\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["Stomp","SockJS","name","data","title","content","recvList","created","connect","methods","sendcontent","e","console","log","keyCode","send","send2","stompClient","connected","msg","JSON","stringify","serverURL","socket","over","frame","subscribe","res","body","push","parse","error"],"sourceRoot":"","sources":["/home/realvue/src/views/main/webSocketTest.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    title: \n    <input\n      v-model=\"title\"\n      type=\"text\"\n    >\n    내용: <input\n      v-model=\"content\"\n      type=\"text\"\n      @keyup=\"sendcontent\"\n    >\n    <div\n      v-for=\"(item, idx) in recvList\"\n      :key=\"idx\"\n    >\n      <h3>title: {{ item.title }}</h3>\n      <h3>내용: {{ item.content }}</h3>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Stomp from 'webstomp-client'\nimport SockJS from 'sockjs-client'\n\n\nexport default {\n  name: 'App',\n  data() {\n    return {\n      title: \"\",\n      content: \"\",\n      recvList: []\n    }\n  },\n  created() {\n    // App.vue가 생성되면 소켓 연결을 시도합니다.\n    this.connect()\n  },\n  methods: {\n    sendcontent (e) {\n      console.log(\"keyup: \" + e.keyCode);\n      if(e.keyCode === 13 && this.title !== '' && this.content !== ''){\n        \n        this.send()\n        this.send2()\n        this.content = ''\n      }\n    },    \n    send() {\n      console.log(\"Send content:\" + this.content);\n      console.log(this.stompClient);\n      console.log(this.stompClient.connected);\n      if (this.stompClient && this.stompClient.connected) {\n        const msg = { \n          title: this.title,\n          content: this.content \n        };\n        this.stompClient.send(\"/receive\", JSON.stringify(msg), {});\n      }\n    },\n    send2() {\n      console.log(\"Send content2222222:\" + this.content);\n      if (this.stompClient && this.stompClient.connected) {\n        const msg = { \n          title: this.title,\n          content: this.content \n        };\n        this.stompClient.send(\"/receive2\", JSON.stringify(msg), {});\n      }\n    },       \n    connect() {\n      const serverURL = \"http://localhost:8080/socket\"\n      let socket = new SockJS(serverURL);\n      this.stompClient = Stomp.over(socket);\n      console.log(`소켓 연결을 시도합니다. 서버 주소: ${serverURL}`)\n      this.stompClient.connect(\n        {},\n        frame => {\n          // 소켓 연결 성공\n          this.connected = true;\n          console.log('소켓 연결 성공', frame);\n          // 서버의 메시지 전송 endpoint를 구독합니다.\n          // 이런형태를 pub sub 구조라고 합니다.\n          this.stompClient.subscribe(\"/send\", res => {\n            console.log('구독으로 받은 메시지 입니다.', res.body);\n\n            // 받은 데이터를 json으로 파싱하고 리스트에 넣어줍니다.\n            this.recvList.push(JSON.parse(res.body))\n          });\n          this.stompClient.subscribe(\"/send2\", res => {\n            console.log('222222222222', res.body);\n          });\n        },\n        error => {\n          // 소켓 연결 실패\n          console.log('소켓 연결 실패', error);\n          this.connected = false;\n        }\n      );        \n    }\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module"}