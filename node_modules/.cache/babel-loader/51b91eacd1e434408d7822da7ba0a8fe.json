{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VChipGroup.css\"; // Composables\n\nimport { makeGroupProps, useGroup } from \"../../composables/group.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { makeVariantProps } from \"../../composables/variant.mjs\";\nimport { provideDefaults } from \"../../composables/defaults.mjs\"; // Utilities\n\nimport { deepEqual, defineComponent } from \"../../util/index.mjs\";\nimport { toRef } from 'vue'; // Types\n\nexport const VChipGroupSymbol = Symbol.for('vuetify:v-chip-group');\nexport const VChipGroup = defineComponent({\n  name: 'VChipGroup',\n  props: {\n    column: Boolean,\n    filter: Boolean,\n    valueComparator: {\n      type: Function,\n      default: deepEqual\n    },\n    ...makeGroupProps({\n      selectedClass: 'v-chip--selected'\n    }),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n    ...makeVariantProps({\n      variant: 'contained-text'\n    })\n  },\n  emits: {\n    'update:modelValue': value => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      isSelected,\n      select,\n      next,\n      prev,\n      selected\n    } = useGroup(props, VChipGroupSymbol);\n    provideDefaults({\n      VChip: {\n        color: toRef(props, 'color'),\n        filter: toRef(props, 'filter'),\n        variant: toRef(props, 'variant')\n      }\n    });\n    return () => {\n      var _slots$default;\n\n      return _createVNode(props.tag, {\n        \"class\": ['v-chip-group', {\n          'v-chip-group--column': props.column\n        }, themeClasses.value]\n      }, {\n        default: () => [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, {\n          isSelected,\n          select,\n          next,\n          prev,\n          selected: selected.value\n        })]\n      });\n    };\n  }\n\n});","map":{"version":3,"mappings":"mDAAA;;AACA,0B,CAEA;;SACSA,gBAAgBC,gB;SAChBC,oB;SACAC,gBAAgBC,oB;SAChBC,wB;SACAC,uB,kCAET;;SACSC,WAAWC,uB;AACpB,SAASC,KAAT,QAAsB,KAAtB,C,CAEA;;AAGA,OAAO,MAAMC,gBAAgB,GAAGC,MAAM,CAACC,GAAPD,CAAW,sBAAXA,CAAzB;AAEP,OAAO,MAAME,UAAU,GAAGL,eAAe,CAAC;EACxCM,IAAI,EAAE,YADkC;EAGxCC,KAAK,EAAE;IACLC,MAAM,EAAEC,OADH;IAELC,MAAM,EAAED,OAFH;IAGLE,eAAe,EAAE;MACfC,IAAI,EAAEC,QADS;MAEfC,OAAO,EAAEf;IAFM,CAHZ;IAQL,GAAGP,cAAc,CAAC;MAAEuB,aAAa,EAAE;IAAjB,CAAD,CARZ;IASL,GAAGrB,YAAY,EATV;IAUL,GAAGC,cAAc,EAVZ;IAWL,GAAGE,gBAAgB,CAAC;MAAEmB,OAAO,EAAE;IAAX,CAAD;EAXd,CAHiC;EAiBxCC,KAAK,EAAE;IACL,qBAAsBC,KAAD,IAAgB;EADhC,CAjBiC;;EAqBxCC,KAAK,CAAEZ,KAAF,QAAoB;IAAA,IAAX;MAAEa;IAAF,IAAWC;IACvB,MAAM;MAAEC;IAAF,IAAmB1B,YAAY,CAACW,KAAD,CAArC;IACA,MAAM;MAAEgB,UAAF;MAAcC,MAAd;MAAsBC,IAAtB;MAA4BC,IAA5B;MAAkCC;IAAlC,IAA+ClC,QAAQ,CAACc,KAAD,EAAQL,gBAAR,CAA7D;IAEAJ,eAAe,CAAC;MACd8B,KAAK,EAAE;QACLC,KAAK,EAAE5B,KAAK,CAACM,KAAD,EAAQ,OAAR,CADP;QAELG,MAAM,EAAET,KAAK,CAACM,KAAD,EAAQ,QAAR,CAFR;QAGLS,OAAO,EAAEf,KAAK,CAACM,KAAD,EAAQ,SAAR;MAHT;IADO,CAAD,CAAfT;IAQA,OAAO;MAAA;;MAAA;QAAA,SAEI,CACL,cADK,EAEL;UACE,wBAAwBS,KAAK,CAACC;QADhC,CAFK,EAKLc,YAAY,CAACJ,KALR;MAFJ;QAAAJ,kCAUDM,KAAK,CAACN,OAVL,qBAUDgB,2BAAgB;UAChBP,UADgB;UAEhBC,MAFgB;UAGhBC,IAHgB;UAIhBC,IAJgB;UAKhBC,QAAQ,EAAEA,QAAQ,CAACT;QALH,CAAhB,CAVC;MAAA;IAAP;EAmBD;;AApDuC,CAAD,CAAlC","names":["makeGroupProps","useGroup","makeTagProps","makeThemeProps","provideTheme","makeVariantProps","provideDefaults","deepEqual","defineComponent","toRef","VChipGroupSymbol","Symbol","for","VChipGroup","name","props","column","Boolean","filter","valueComparator","type","Function","default","selectedClass","variant","emits","value","setup","slots","_ref","themeClasses","isSelected","select","next","prev","selected","VChip","color","_slots$default"],"sources":["../../../src/components/VChipGroup/VChipGroup.tsx"],"sourcesContent":["// Styles\nimport './VChipGroup.sass'\n\n// Composables\nimport { makeGroupProps, useGroup } from '@/composables/group'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { makeVariantProps } from '@/composables/variant'\nimport { provideDefaults } from '@/composables/defaults'\n\n// Utilities\nimport { deepEqual, defineComponent } from '@/util'\nimport { toRef } from 'vue'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport const VChipGroupSymbol = Symbol.for('vuetify:v-chip-group')\n\nexport const VChipGroup = defineComponent({\n  name: 'VChipGroup',\n\n  props: {\n    column: Boolean,\n    filter: Boolean,\n    valueComparator: {\n      type: Function as PropType<typeof deepEqual>,\n      default: deepEqual,\n    },\n\n    ...makeGroupProps({ selectedClass: 'v-chip--selected' }),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n    ...makeVariantProps({ variant: 'contained-text' } as const),\n  },\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const { themeClasses } = provideTheme(props)\n    const { isSelected, select, next, prev, selected } = useGroup(props, VChipGroupSymbol)\n\n    provideDefaults({\n      VChip: {\n        color: toRef(props, 'color'),\n        filter: toRef(props, 'filter'),\n        variant: toRef(props, 'variant'),\n      },\n    })\n\n    return () => (\n      <props.tag\n        class={[\n          'v-chip-group',\n          {\n            'v-chip-group--column': props.column,\n          },\n          themeClasses.value,\n        ]}\n      >\n        { slots.default?.({\n          isSelected,\n          select,\n          next,\n          prev,\n          selected: selected.value,\n        }) }\n      </props.tag>\n    )\n  },\n})\n\nexport type VChipGroup = InstanceType<typeof VChipGroup>\n"]},"metadata":{},"sourceType":"module"}