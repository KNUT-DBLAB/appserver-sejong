{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_createTextVNode(\" title: \");\n\nconst _hoisted_3 = /*#__PURE__*/_createTextVNode(\" 내용: \");\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.title = $event),\n    type: \"text\"\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.title]]), _hoisted_3, _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.content = $event),\n    type: \"text\",\n    onKeyup: _cache[2] || (_cache[2] = (...args) => $options.sendcontent && $options.sendcontent(...args))\n  }, null, 544\n  /* HYDRATE_EVENTS, NEED_PATCH */\n  ), [[_vModelText, $data.content]]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.recvList, (item, idx) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: idx\n    }, [_createElementVNode(\"h3\", null, \"title: \" + _toDisplayString(item.title), 1\n    /* TEXT */\n    ), _createElementVNode(\"h3\", null, \"내용: \" + _toDisplayString(item.content), 1\n    /* TEXT */\n    )]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))]);\n}","map":{"version":3,"mappings":";;EACOA,EAAE,EAAC;;;iDAAM;;iDAKX;;;uBALHC,oBAkBM,KAlBN,cAkBM,6BAhBJC,oBAGC,OAHD,EAGC;+DAFUC,cAAKC,OAEf;IADCC,IAAI,EAAC;EACN,CAHD;;EAAA,kBACWF,cAeP,8BAZAD,oBAIH,OAJG,EAIH;+DAHUC,gBAAOC,OAGjB;IAFCC,IAAI,EAAC,MAEN;IADEC,OAAK,yCAAEC,qDAAF;EACP,CAJG;;EAAA,kBACOJ,gBAWP,qBAPJF,oBAMMO,SANN,EAMM,IANN,EAMMC,YALkBN,cAKlB,EAL0B,CAAtBO,IAAsB,EAAhBC,GAAgB,KAAb;yBADnBV,oBAMM,KANN,EAMM;MAJHW,GAAG,EAAED;IAIF,CANN,EAEW,CAETT,oBAAgC,IAAhC,EAAgC,IAAhC,EAAI,YAAOW,iBAAGH,IAAI,CAACI,KAAR,CAAX,EAAwB;IAAA;IAAxB,CAFS,EAGTZ,oBAA+B,IAA/B,EAA+B,IAA/B,EAAI,SAAIW,iBAAGH,IAAI,CAACK,OAAR,CAAR,EAAuB;IAAA;IAAvB,CAHS,CAFX;GAMM,CANN;;EAAA,CAOI,EAlBN","names":["id","_createElementBlock","_createElementVNode","$data","$event","type","onKeyup","$options","_Fragment","_renderList","item","idx","key","_toDisplayString","title","content"],"sourceRoot":"","sources":["/home/realvue/src/views/main/webSocketTest.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    title: \n    <input\n      v-model=\"title\"\n      type=\"text\"\n    >\n    내용: <input\n      v-model=\"content\"\n      type=\"text\"\n      @keyup=\"sendcontent\"\n    >\n    <div\n      v-for=\"(item, idx) in recvList\"\n      :key=\"idx\"\n    >\n      <h3>title: {{ item.title }}</h3>\n      <h3>내용: {{ item.content }}</h3>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Stomp from 'webstomp-client'\nimport SockJS from 'sockjs-client'\n\n\nexport default {\n  name: 'App',\n  data() {\n    return {\n      title: \"\",\n      content: \"\",\n      recvList: []\n    }\n  },\n  created() {\n    // App.vue가 생성되면 소켓 연결을 시도합니다.\n    this.connect()\n  },\n  methods: {\n    sendcontent (e) {\n      console.log(\"keyup: \" + e.keyCode);\n      if(e.keyCode === 13 && this.title !== '' && this.content !== ''){\n        \n        this.send()\n        this.send2()\n        this.content = ''\n      }\n    },    \n    send() {\n      console.log(\"Send content:\" + this.content);\n      console.log(this.stompClient);\n      console.log(this.stompClient.connected);\n      if (this.stompClient && this.stompClient.connected) {\n        const msg = { \n          title: this.title,\n          content: this.content \n        };\n        this.stompClient.send(\"/receive\", JSON.stringify(msg), {});\n      }\n    },\n    send2() {\n      console.log(\"Send content2222222:\" + this.content);\n      if (this.stompClient && this.stompClient.connected) {\n        const msg = { \n          title: this.title,\n          content: this.content \n        };\n        this.stompClient.send(\"/receive2\", JSON.stringify(msg), {});\n      }\n    },       \n    connect() {\n      const serverURL = \"http://localhost:8080/socket\"\n      let socket = new SockJS(serverURL);\n      this.stompClient = Stomp.over(socket);\n      console.log(`소켓 연결을 시도합니다. 서버 주소: ${serverURL}`)\n      this.stompClient.connect(\n        {},\n        frame => {\n          // 소켓 연결 성공\n          this.connected = true;\n          console.log('소켓 연결 성공', frame);\n          // 서버의 메시지 전송 endpoint를 구독합니다.\n          // 이런형태를 pub sub 구조라고 합니다.\n          this.stompClient.subscribe(\"/send\", res => {\n            console.log('구독으로 받은 메시지 입니다.', res.body);\n\n            // 받은 데이터를 json으로 파싱하고 리스트에 넣어줍니다.\n            this.recvList.push(JSON.parse(res.body))\n          });\n          this.stompClient.subscribe(\"/send2\", res => {\n            console.log('222222222222', res.body);\n          });\n        },\n        error => {\n          // 소켓 연결 실패\n          console.log('소켓 연결 실패', error);\n          this.connected = false;\n        }\n      );        \n    }\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module"}