{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  name: 'SignupForm',\n\n  data() {\n    return {\n      c_name: null,\n      c_email: null,\n      c_passwd: null,\n      c_phonenum: null,\n      dialog: false,\n      state: 'ins',\n      authList: [{\n        name: '관리자',\n        value: 'A'\n      }, {\n        name: '일반 사용자',\n        value: 'M'\n      }],\n      user_id: '',\n      emailRules: [v => !!v || 'E-mail을 입력해주세요.', v => /.+@.+/.test(v) || '유효하지 않은 형식의 E-mail 입니다.'],\n      user_nm: '',\n      user_nm_rule: [v => !!v || '이름은 필수 입력사항입니다.', v => !(v && v.length >= 30) || '이름은 30자 이상 입력할 수 없습니다.', v => !/[~!@#$%^&*()_+|<>?:{}]/.test(v) || '이름에는 특수문자를 사용할 수 없습니다.'],\n      user_pw: '',\n      user_pw_chk: '',\n      user_pw_rule: [v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true, v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.'],\n      user_pw_rule2: [v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true, v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.', v => v === this.user_pw || '패스워드가 일치하지 않습니다.'],\n      user_auth: '',\n      user_auth_rule: [v => !!v || '권한은 필수 선택 사항입니다.'],\n      user_desc: '',\n      user_desc_rule: [v => !(v && v.length >= 100) || '설명은 100자 이상 입력할 수 업습니다.']\n    };\n  },\n\n  existEmail(c_email) {\n    console.log(c_email);\n    this.$store.dispatch('existEmail', c_email);\n  },\n\n  emailRules: [v => !!v || 'E-mail을 입력해주세요.', v => /.+@.+/.test(v) || '유효하지 않은 형식의 E-mail 입니다.'],\n  c_passwd: '',\n  c_passwd_chk: '',\n  user_pw_rule: [v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true, v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.'],\n  user_pw_rule2: [v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true, v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.', v => v === this.user_pw || '패스워드가 일치하지 않습니다.'],\n\n  signupConsumer(signupObj) {\n    const validate = this.$refs.form.validate();\n    console.log(this.$store.state.existEmail);\n\n    if (this.$store.state.existEmail) {\n      alert('이메일 중복 확인을 완료해주세요!');\n    } else {\n      console.log(signupObj);\n      axios.post('http://localhost:8080/api/signupConsumer', signupObj).then(res => {\n        console.log(res);\n\n        if (res.data == 0) {\n          alert(\"회원가입 실패..\");\n        } else {\n          alert(\"회원가입 성공..\"); // main으로 넘기기\n\n          console.log(\"main으로!!\");\n          console.log(this.token);\n          console.log(res.data.token);\n          this.token = res.data.token;\n          this.$router.push({\n            name: 'main',\n            params: this.token\n          });\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  }\n\n};","map":{"version":3,"mappings":"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","names":["axios","name","data","c_name","c_email","c_passwd","c_phonenum","dialog","state","authList","value","user_id","emailRules","v","test","user_nm","user_nm_rule","length","user_pw","user_pw_chk","user_pw_rule","user_pw_rule2","user_auth","user_auth_rule","user_desc","user_desc_rule","existEmail","console","log","$store","dispatch","c_passwd_chk","signupConsumer","signupObj","validate","$refs","form","alert","post","then","res","token","$router","push","params","catch","err"],"sourceRoot":"","sources":["/home/realvue/src/views/test.vue"],"sourcesContent":["<template>\n<v-form ref=\"form\" lazy-validation>\n  <v-row>\n    <v-col cols=\"12\">\n      <v-text-field \n      \tv-model=\"emailRules\" \n        label=\"아이디*\" \n        :rules=\"user_id_rule\" \n        :disabled=\"state == 'ins' ? false : true\"\n        required\n        ></v-text-field>\n    </v-col>\n    <v-col cols=\"12\">\n      <v-text-field \n      \tv-model=\"user_nm\" \n        label=\"이름*\" \n        :rules=\"user_nm_rule\" \n        required\n        ></v-text-field>\n    </v-col>\n    <v-col cols=\"12\">\n      <v-text-field \n      \tv-model=\"user_pw\" \n        label=\"비밀번호*\" \n        type=\"password\" \n        :rules=\"user_pw_rule\"\n        ></v-text-field>\n    </v-col>\n    <v-col cols=\"12\">\n      <v-text-field \n      \tv-model=\"user_pw_chk\" \n        label=\"비밀번호 확인*\" \n        type=\"password\" \n        :rules=\"user_pw_rule2\"\n        ></v-text-field>\n    </v-col>\n    <v-col cols=\"12\">\n      <v-select \n      \tv-model=\"user_auth\" \n        label=\"권한*\" \n        :items=\"authList\" \n        item-text=\"name\" \n        item-value=\"value\" \n        return-object\n        :rules=\"user_auth_rule\"\n        ></v-select>\n    </v-col>\n    <v-col cols=\"12\">\n      <v-text-field \n      \tv-model=\"user_desc\" \n        label=\"설명\" \n        :rules=\"user_desc_rule\"\n        ></v-text-field>\n    </v-col>\n  </v-row>\n\n    <button class=\"login-form__btn_right\" @click=\"signupConsumer({c_name, c_email, c_passwd, c_phonenum})\">다음</button>\n</v-form>\n</template>\n\n\n<script>\nimport axios from \"axios\"\n\nexport default {\n\tname: 'SignupForm',\n\tdata() {\n\t\treturn {\n            c_name: null,\n\t\t\tc_email: null,\n\t\t\tc_passwd: null,\n\t\t\tc_phonenum: null,\n            dialog: false,\n            state: 'ins',\n      authList: [\n        { name: '관리자', value: 'A'},\n        { name: '일반 사용자', value: 'M'}\n      ],\n      user_id: '',\n        emailRules: [\n            v => !!v || 'E-mail을 입력해주세요.',\n            v => /.+@.+/.test(v) || '유효하지 않은 형식의 E-mail 입니다.',\n        ],\n      user_nm: '',\n      user_nm_rule: [\n        v => !!v || '이름은 필수 입력사항입니다.',\n        v => !(v && v.length >= 30) || '이름은 30자 이상 입력할 수 없습니다.',\n        v => !/[~!@#$%^&*()_+|<>?:{}]/.test(v) || '이름에는 특수문자를 사용할 수 없습니다.'\n      ],\n      user_pw: '',\n      user_pw_chk: '',\n      user_pw_rule: [\n        v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true,\n        v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.',\n      ],\n      user_pw_rule2: [\n        v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true,\n        v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.',\n        v => v === this.user_pw || '패스워드가 일치하지 않습니다.'\n      ],\n      user_auth: '',\n      user_auth_rule: [\n        v => !!v || '권한은 필수 선택 사항입니다.'\n      ],\n      user_desc: '',\n      user_desc_rule: [\n        v => !(v && v.length >= 100) || '설명은 100자 이상 입력할 수 업습니다.'\n      ]\n    }\n  },\n        existEmail(c_email) {\n            console.log(c_email);\n\t\t\tthis.$store.dispatch('existEmail', c_email)\n\t\t},\n        emailRules: [\n            v => !!v || 'E-mail을 입력해주세요.',\n            v => /.+@.+/.test(v) || '유효하지 않은 형식의 E-mail 입니다.',\n        ],\n        c_passwd: '',\n        c_passwd_chk: '',\n        user_pw_rule: [\n            v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true,\n            v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.',\n        ],\n        user_pw_rule2: [\n            v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true,\n            v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.',\n            v => v === this.user_pw || '패스워드가 일치하지 않습니다.'\n        ],\n\n\t\tsignupConsumer(signupObj) {\n            const validate = this.$refs.form.validate();\n            console.log(this.$store.state.existEmail);\n            if(this.$store.state.existEmail){\n                alert('이메일 중복 확인을 완료해주세요!')\n            } else {\n                console.log(signupObj);\n                axios.post('http://localhost:8080/api/signupConsumer', signupObj) \n                .then(res => {\n                    console.log(res);\n                    if (res.data == 0){\n                        alert(\"회원가입 실패..\")\n                    } else {\n                        alert(\"회원가입 성공..\")\n                        // main으로 넘기기\n                        console.log(\"main으로!!\");\n                        console.log(this.token);\n                        console.log(res.data.token);\n                        this.token = res.data.token;\n                        this.$router.push({name: 'main', params: this.token});\n                    }\n                })\n                .catch(err => {\n                    console.log(err);\n                });\n            }\n\t\t}\n\t}\n;\n\n</script>\n\n\n\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module"}