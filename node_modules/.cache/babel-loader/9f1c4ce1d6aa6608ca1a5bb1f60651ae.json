{"ast":null,"code":"// import axios from \"axios\"\nimport Stomp from 'webstomp-client';\nimport SockJS from 'sockjs-client';\nimport bottomNav from '@/components/bottomNav.vue';\nimport InfiniteLoading from \"v3-infinite-loading\"; // import { ref } from 'vue'; \n\nlet comments = ref([]);\nlet page = 1;\n\nconst load = async $state => {\n  console.log(\"loading...\");\n\n  try {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/comments?_limit=10&_page=\" + page);\n    const json = await response.json();\n    if (json.length < 10) $state.complete();else {\n      comments.value.push(...json);\n      $state.loaded();\n    }\n    page++;\n  } catch (error) {\n    $state.error();\n  }\n};\n\nexport default {\n  components: {\n    bottomNav\n  },\n\n  data() {\n    return {\n      // limit: 0,\n      // auctionList: [], // 배열에 저장 v-for=\"product in productList\" -> v-for 문 사용해서 표시\n      model: 0,\n      colors: ['primary', 'secondary', 'yellow darken-2', 'red', 'orange']\n    };\n  },\n\n  //데이터베이스 에서 배열로 가져와서\n  created() {\n    // vue 생성 시 소켓 연결\n    this.connect();\n  },\n\n  methods: {\n    navigateProduct(auction) {\n      console.log(\"navigateProduct\");\n      console.log(auction);\n      console.log(auction.bid_num); // this.$router.push({path:`/user/${auction_id}`, params: { auction_id: 3}});\n\n      this.$router.push({\n        name: 'auction_detail',\n        params: {\n          id: auction.auction_Id,\n          auction: JSON.stringify(auction)\n        }\n      });\n    },\n\n    moreProduct() {\n      this.send();\n    },\n\n    // bid(bidding){\n    //   this.send_bidding(bidding)\n    // },    \n    send() {\n      console.log(\"limit:\" + this.$store.state.limit);\n      console.log(this.stompClient);\n      console.log(this.stompClient.connected);\n\n      if (this.stompClient && this.stompClient.connected) {\n        console.log(this.$store.state.limit);\n        console.log(this.$store.state.config.headers.TOKEN);\n        this.stompClient.send(\"/receive_limit/\" + this.$store.state.config.headers.TOKEN, this.$store.state.limit, {});\n        this.$store.commit('UP_LIMIT', 2);\n        console.log(this.$store.state.auctionList);\n      }\n    },\n\n    // send_bidding(bidding){\n    //   console.log(\"bid_price:\" + bidding.bid_price);\n    //   console.log(this.stompClient);\n    //   console.log(this.stompClient.connected);\n    //   if (this.stompClient && this.stompClient.connected) {\n    //     console.log(\"auction_id: \" + bidding.auction_id);\n    //     console.log(\"bid_price:\" + bidding.bid_price);\n    //     this.stompClient.send(\"/receive_bidding\", JSON.stringify(bidding), {});\n    //     console.log(this.$store.state.auctionList);\n    //   }\n    // },\n    connect() {\n      const serverURL = \"http://localhost:8080/socket\";\n      let socket = new SockJS(serverURL);\n      this.stompClient = Stomp.over(socket);\n      console.log(`소켓 연결을 시도합니다. 서버 주소: ${serverURL}`);\n      console.log(this.$store.state.config.headers);\n      let headers = {\n        TOKEN: this.$store.state.config.headers.TOKEN\n      };\n      console.log(headers);\n      this.stompClient.connect(headers, frame => {\n        this.connected = true;\n        console.log('소켓 연결 성공', frame);\n        this.stompClient.subscribe(\"/send_auction_data/\" + this.$store.state.config.headers.TOKEN, res => {\n          const response_data = JSON.parse(res.body);\n          console.log(response_data[0]);\n          console.log(response_data.length);\n          JSON.parse(res.body);\n\n          for (let i = 0; i < response_data.length; i++) {\n            this.$store.commit('PUSH_AUCTION', response_data[i]); // this.auctionList.push(response_data[i])\n          }\n\n          console.log(\"this.auctionList\");\n          console.log(this.$store.state.auctionList[0]);\n        });\n        this.stompClient.subscribe(\"/send_bidding\", res => {\n          const response_bidding = JSON.parse(res.body);\n          console.log(response_bidding);\n\n          if (response_bidding != undefined) {\n            this.$store.commit('UPDATE_BID_PRICE', response_bidding);\n          } // response_data.auction_id로 현재 가지고 있는 리스트의 가격을 변경\n\n        });\n      }, error => {\n        // 소켓 연결 실패\n        console.log('소켓 연결 실패', error);\n        this.connected = false;\n      });\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAmHA;AACA,OAAOA,KAAP,MAAkB,iBAAlB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,eAAP,MAA4B,qBAA5B,C,CACA;;AAEE,IAAIC,QAAO,GAAIC,GAAG,CAAC,EAAD,CAAlB;AACA,IAAIC,IAAG,GAAI,CAAX;;AACA,MAAMC,IAAG,GAAI,MAAMC,MAAN,IAAgB;EAC3BC,OAAO,CAACC,GAAR,CAAY,YAAZ;;EAEA,IAAI;IACF,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAC1B,mEAAmEN,IADzC,CAA5B;IAGA,MAAMO,IAAG,GAAI,MAAMF,QAAQ,CAACE,IAAT,EAAnB;IACA,IAAIA,IAAI,CAACC,MAAL,GAAc,EAAlB,EAAsBN,MAAM,CAACO,QAAP,GAAtB,KACK;MACHX,QAAQ,CAACY,KAAT,CAAeC,IAAf,CAAoB,GAAGJ,IAAvB;MACAL,MAAM,CAACU,MAAP;IACF;IACAZ,IAAI;EACN,CAXA,CAWE,OAAOa,KAAP,EAAc;IACdX,MAAM,CAACW,KAAP;EACF;AACD,CAjBD;;AAkBF,eAAc;EAEZC,UAAU,EAAE;IAAElB;EAAF,CAFA;;EAGZmB,IAAI,GAAG;IACH,OAAO;MACH;MACA;MACAC,KAAK,EAAE,CAHJ;MAIHC,MAAM,EAAE,CACJ,SADI,EAEJ,WAFI,EAGJ,iBAHI,EAIJ,KAJI,EAKJ,QALI;IAJL,CAAP;EAYH,CAhBW;;EAmBZ;EACAC,OAAO,GAAG;IACR;IACA,KAAKC,OAAL;EACD,CAvBW;;EAyBZC,OAAO,EAAE;IACPC,eAAc,CAAGC,OAAH,EAAY;MACxBnB,OAAO,CAACC,GAAR,CAAY,iBAAZ;MACAD,OAAO,CAACC,GAAR,CAAYkB,OAAZ;MACAnB,OAAO,CAACC,GAAR,CAAYkB,OAAO,CAACC,OAApB,EAHwB,CAIxB;;MACA,KAAKC,OAAL,CAAab,IAAb,CAAkB;QAACc,IAAI,EAAC,gBAAN;QAAwBC,MAAM,EAAE;UAAEC,EAAE,EAAEL,OAAO,CAACM,UAAd;UAA0BN,OAAO,EAAEO,IAAI,CAACC,SAAL,CAAeR,OAAf;QAAnC;MAAhC,CAAlB;IACD,CAPM;;IAQPS,WAAU,GAAK;MACb,KAAKC,IAAL;IACD,CAVM;;IAWP;IACA;IACA;IACAA,IAAI,GAAG;MACL7B,OAAO,CAACC,GAAR,CAAY,WAAW,KAAK6B,MAAL,CAAYC,KAAZ,CAAkBC,KAAzC;MACAhC,OAAO,CAACC,GAAR,CAAY,KAAKgC,WAAjB;MACAjC,OAAO,CAACC,GAAR,CAAY,KAAKgC,WAAL,CAAiBC,SAA7B;;MACA,IAAI,KAAKD,WAAL,IAAoB,KAAKA,WAAL,CAAiBC,SAAzC,EAAoD;QAClDlC,OAAO,CAACC,GAAR,CAAY,KAAK6B,MAAL,CAAYC,KAAZ,CAAkBC,KAA9B;QACAhC,OAAO,CAACC,GAAR,CAAY,KAAK6B,MAAL,CAAYC,KAAZ,CAAkBI,MAAlB,CAAyBC,OAAzB,CAAiCC,KAA7C;QACA,KAAKJ,WAAL,CAAiBJ,IAAjB,CAAsB,oBAAkB,KAAKC,MAAL,CAAYC,KAAZ,CAAkBI,MAAlB,CAAyBC,OAAzB,CAAiCC,KAAzE,EAAgF,KAAKP,MAAL,CAAYC,KAAZ,CAAkBC,KAAlG,EAAyG,EAAzG;QAEA,KAAKF,MAAL,CAAYQ,MAAZ,CAAmB,UAAnB,EAA+B,CAA/B;QAEAtC,OAAO,CAACC,GAAR,CAAY,KAAK6B,MAAL,CAAYC,KAAZ,CAAkBQ,WAA9B;MACF;IACD,CA3BM;;IA4BP;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAvB,OAAO,GAAG;MACR,MAAMwB,SAAQ,GAAI,8BAAlB;MACA,IAAIC,MAAK,GAAI,IAAIjD,MAAJ,CAAWgD,SAAX,CAAb;MACA,KAAKP,WAAL,GAAmB1C,KAAK,CAACmD,IAAN,CAAWD,MAAX,CAAnB;MACAzC,OAAO,CAACC,GAAR,CAAa,wBAAuBuC,SAAU,EAA9C;MAEAxC,OAAO,CAACC,GAAR,CAAY,KAAK6B,MAAL,CAAYC,KAAZ,CAAkBI,MAAlB,CAAyBC,OAArC;MACA,IAAIA,OAAM,GAAI;QAAEC,KAAK,EAAE,KAAKP,MAAL,CAAYC,KAAZ,CAAkBI,MAAlB,CAAyBC,OAAzB,CAAiCC;MAA1C,CAAd;MACArC,OAAO,CAACC,GAAR,CAAYmC,OAAZ;MACA,KAAKH,WAAL,CAAiBjB,OAAjB,CACEoB,OADF,EAEEO,KAAI,IAAK;QACP,KAAKT,SAAL,GAAiB,IAAjB;QACAlC,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB0C,KAAxB;QAEA,KAAKV,WAAL,CAAiBW,SAAjB,CAA2B,wBAAsB,KAAKd,MAAL,CAAYC,KAAZ,CAAkBI,MAAlB,CAAyBC,OAAzB,CAAiCC,KAAlF,EAA0FQ,GAAE,IAAK;UAE/F,MAAMC,aAAY,GAAIpB,IAAI,CAACqB,KAAL,CAAWF,GAAG,CAACG,IAAf,CAAtB;UACAhD,OAAO,CAACC,GAAR,CAAY6C,aAAa,CAAC,CAAD,CAAzB;UACA9C,OAAO,CAACC,GAAR,CAAY6C,aAAa,CAACzC,MAA1B;UACAqB,IAAI,CAACqB,KAAL,CAAWF,GAAG,CAACG,IAAf;;UACA,KAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,aAAa,CAACzC,MAAlC,EAA0C4C,CAAC,EAA3C,EAA+C;YAC7C,KAAKnB,MAAL,CAAYQ,MAAZ,CAAmB,cAAnB,EAAmCQ,aAAa,CAACG,CAAD,CAAhD,EAD6C,CAE7C;UACF;;UACAjD,OAAO,CAACC,GAAR,CAAY,kBAAZ;UACAD,OAAO,CAACC,GAAR,CAAY,KAAK6B,MAAL,CAAYC,KAAZ,CAAkBQ,WAAlB,CAA8B,CAA9B,CAAZ;QACD,CAZD;QAaA,KAAKN,WAAL,CAAiBW,SAAjB,CAA2B,eAA3B,EAA6CC,GAAE,IAAK;UAElD,MAAMK,gBAAe,GAAIxB,IAAI,CAACqB,KAAL,CAAWF,GAAG,CAACG,IAAf,CAAzB;UACAhD,OAAO,CAACC,GAAR,CAAYiD,gBAAZ;;UACA,IAAIA,gBAAe,IAAKC,SAAxB,EAAmC;YACjC,KAAKrB,MAAL,CAAYQ,MAAZ,CAAmB,kBAAnB,EAAuCY,gBAAvC;UACF,CANkD,CAQlD;;QACD,CATD;MAUD,CA7BH,EA8BExC,KAAI,IAAK;QACP;QACAV,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBS,KAAxB;QACA,KAAKwB,SAAL,GAAiB,KAAjB;MACF,CAlCF;IAoCF;;EApFO;AAzBG,CAAd","names":["Stomp","SockJS","bottomNav","InfiniteLoading","comments","ref","page","load","$state","console","log","response","fetch","json","length","complete","value","push","loaded","error","components","data","model","colors","created","connect","methods","navigateProduct","auction","bid_num","$router","name","params","id","auction_Id","JSON","stringify","moreProduct","send","$store","state","limit","stompClient","connected","config","headers","TOKEN","commit","auctionList","serverURL","socket","over","frame","subscribe","res","response_data","parse","body","i","response_bidding","undefined"],"sourceRoot":"","sources":["/home/realvue/src/views/main/auction.vue"],"sourcesContent":["<template>\n<div>\n  <div class=\"main_nav_t_div\">\n    <nav class=\"main_t_nav\">\n        <ul class=\"main_t_nav_list\">\n            <li class=\"nav__btn\">\n                <div class=\"nav__notification-dot\"></div>\n                <a class=\"nav__link\"><i class=\"fas fa-bars fa-2x\" aria-hidden=\"true\"></i>\n                </a>\n            </li>\n\n            \n            <li class=\"main_m_li_list\">\n                <a class=\"nav_m_link\" href=\"workout.html\">\n                    <h4 class=\"user-component__title\">경매 알림</h4><i class=\" fa-2x\" aria-hidden=\"true\" image\n                        src=\"../image/123.jpg\"></i>\n                </a>\n            </li>\n\n            <li class=\"nav__btn\">\n                <a class=\"nav__link\" onclick=\"goBack()\"><i class=\"fas fa-chevron-left fa-2x\"\n                        aria-hidden=\"true\"></i>\n                </a>\n            </li>\n          </ul>\n      </nav>\n  </div>\n  \n    <!-- <div class=\"swiper mySwiper\">\n      <div class=\"swiper-wrapper\">\n        <div class=\"swiper-slide\">Slide 1</div>\n        <div class=\"swiper-slide\">Slide 2</div>\n        <div class=\"swiper-slide\">Slide 3</div>\n        <div class=\"swiper-slide\">Slide 4</div>\n        <div class=\"swiper-slide\">Slide 5</div>\n        <div class=\"swiper-slide\">Slide 6</div>\n        <div class=\"swiper-slide\">Slide 7</div>\n        <div class=\"swiper-slide\">Slide 8</div>\n        <div class=\"swiper-slide\">Slide 9</div>\n      </div>\n      <div class=\"swiper-pagination\"></div>\n    </div> -->\n\n    <v-carousel v-model=\"model\">\n      <v-carousel-item v-for=\"(color, i) in colors\" :key=\"color\">\n          <v-sheet :color=\"color\" height=\"100%\" tile>\n              <v-row class=\"fill-height\" align=\"center\" justify=\"center\">\n                  <div class=\"text-h2\">\n                      Slide {{ i + 1 }}\n                  </div>\n              </v-row>\n          </v-sheet>\n      </v-carousel-item>\n    </v-carousel>\n\n    <fieldset>\n        <div class=\"white_div\">\n            <div class=\"goods_pay_section \">\n                <div class=\"goods_group\">\n                    <ul class=\"goods_group_list\">\n                        <li v-for=\"auction in this.$store.state.auctionList\" :key=\"auction.auction_Id\"\n                            id=\"_rowLi20220203162708CHK2022020394386781\"\n                            class=\"goods_pay_item _interlockNo20220211200904406814\">\n                            <div class=\"goods_item\">\n                              <!-- a 태그 -> router 태그 -->\n                                <a href=\"/orderStatus/2022020310590721\" class=\"goods_thumb\">\n                                    <img :src='`http://localhost:8080/product_images/${auction.productDTO.product_img_name}.png`'\n                                        alt=\"\" width=\"90\" height=\"90\" /></a>\n                                <div class=\"goods_info\">\n                                    <a href=\"/orderStatus/2022020310590721\" class=\"goods\">\n                                        <p class=\"name\">\n                                            {{auction.productDTO.product}}\n                                        </p>\n                                        <ul class=\"info\">\n                                            <li><span class=\"blind\">상품금액</span>{{auction.bid_price}}원</li>\n                                            <li class=\"date\"><span class=\"blind\">등록일</span> {{auction.productDTO.p_reg_date}}\n                                            </li>\n                                        </ul>\n                                    </a>\n                                    <a href=\"#\"\n                                        class=\"state _statusName value_color_green _click(nmp.front.order.timeline.home.list.openDeliveryPopup(/o/orderStatus/deliveryTracking/2022020394386781/ORDER_DELIVERY/api)) _stopDefault\">{{auction.bid_status}}\n                                        ({{auction.deadline_date}} 경매 종료)</a>\n                                    <p class=\"guide\">\n                                        {{auction.productDTO.p_explanation}}\n                                    </p>\n                                </div>\n                            </div>\n                            <div class=\"seller_item\">\n                                <div class=\"inner\">\n\n                                    <span class=\"seller\">{{auction.f_farm_name}}</span>\n                                    <span class=\"tel\">{{auction.f_phonenum}}</span>\n                                    <!-- <router-link :to=\"{ name: 'auction_detail', params: { auction}, }\"> auction_detail </router-link> -->\n                                    <br><br>\n                                    \n                                    <a v-on:click=\"navigateProduct(auction)\" \n                                        class=\"state_button qna _click(nmp.front.order.timeline.home.list.shoppingInquiry(/merchant/shoppingInquiry/2022020394386781)) _stopDefault\">경매 상세</a>\n                                </div>\n                            </div>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    </fieldset>\n    <div></div>\n    <div>\n      <button @click=\"moreProduct()\">웹소켓</button>\n    </div>\n    <InfiniteLoading :comments=\"comments\" @infinite=\"load\" />\n    <bottom-nav></bottom-nav>\n</div>\n</template>\n\n<script>\n// import axios from \"axios\"\nimport Stomp from 'webstomp-client'\nimport SockJS from 'sockjs-client'\nimport bottomNav from '@/components/bottomNav.vue';\nimport InfiniteLoading from \"v3-infinite-loading\";\n// import { ref } from 'vue'; \n\n  let comments = ref([]);\n  let page = 1;\n  const load = async $state => {\n    console.log(\"loading...\");\n\n    try {\n      const response = await fetch(\n        \"https://jsonplaceholder.typicode.com/comments?_limit=10&_page=\" + page\n      );\n      const json = await response.json();\n      if (json.length < 10) $state.complete();\n      else {\n        comments.value.push(...json);\n        $state.loaded();\n      }\n      page++;\n    } catch (error) {\n      $state.error();\n    }\n  };\nexport default{\n\n  components: { bottomNav },\n  data() {\n      return {            \n          // limit: 0,\n          // auctionList: [], // 배열에 저장 v-for=\"product in productList\" -> v-for 문 사용해서 표시\n          model: 0,\n          colors: [\n              'primary',\n              'secondary',\n              'yellow darken-2',\n              'red',\n              'orange',\n          ],\n      }\n  },\n  \n  \n  //데이터베이스 에서 배열로 가져와서\n  created() {\n    // vue 생성 시 소켓 연결\n    this.connect()\n  },\n\n  methods: {\n    navigateProduct (auction) {\n      console.log(\"navigateProduct\");\n      console.log(auction);\n      console.log(auction.bid_num);\n      // this.$router.push({path:`/user/${auction_id}`, params: { auction_id: 3}});\n      this.$router.push({name:'auction_detail', params: { id: auction.auction_Id, auction: JSON.stringify(auction) }});\n    },\n    moreProduct () {\n      this.send()\n    },\n    // bid(bidding){\n    //   this.send_bidding(bidding)\n    // },    \n    send() {\n      console.log(\"limit:\" + this.$store.state.limit);\n      console.log(this.stompClient);\n      console.log(this.stompClient.connected);\n      if (this.stompClient && this.stompClient.connected) {\n        console.log(this.$store.state.limit);\n        console.log(this.$store.state.config.headers.TOKEN);\n        this.stompClient.send(\"/receive_limit/\"+this.$store.state.config.headers.TOKEN, this.$store.state.limit, {});\n        \n        this.$store.commit('UP_LIMIT', 2);\n\n        console.log(this.$store.state.auctionList);\n      }\n    },\n    // send_bidding(bidding){\n    //   console.log(\"bid_price:\" + bidding.bid_price);\n    //   console.log(this.stompClient);\n    //   console.log(this.stompClient.connected);\n    //   if (this.stompClient && this.stompClient.connected) {\n    //     console.log(\"auction_id: \" + bidding.auction_id);\n    //     console.log(\"bid_price:\" + bidding.bid_price);\n    //     this.stompClient.send(\"/receive_bidding\", JSON.stringify(bidding), {});\n    //     console.log(this.$store.state.auctionList);\n    //   }\n    // },\n    connect() {\n      const serverURL = \"http://localhost:8080/socket\"\n      let socket = new SockJS(serverURL);\n      this.stompClient = Stomp.over(socket);\n      console.log(`소켓 연결을 시도합니다. 서버 주소: ${serverURL}`)\n\n      console.log(this.$store.state.config.headers);\n      let headers = { TOKEN: this.$store.state.config.headers.TOKEN };\n      console.log(headers);\n      this.stompClient.connect(\n        headers,\n        frame => {\n          this.connected = true;\n          console.log('소켓 연결 성공', frame);\n\n          this.stompClient.subscribe(\"/send_auction_data/\"+this.$store.state.config.headers.TOKEN,  res => {\n\n            const response_data = JSON.parse(res.body);\n            console.log(response_data[0]);\n            console.log(response_data.length);\n            JSON.parse(res.body)\n            for (let i = 0; i < response_data.length; i++) {\n              this.$store.commit('PUSH_AUCTION', response_data[i]);\n              // this.auctionList.push(response_data[i])\n            }\n            console.log(\"this.auctionList\");\n            console.log(this.$store.state.auctionList[0]);\n          });\n          this.stompClient.subscribe(\"/send_bidding\",  res => {\n\n            const response_bidding = JSON.parse(res.body);\n            console.log(response_bidding);\n            if (response_bidding != undefined) {\n              this.$store.commit('UPDATE_BID_PRICE', response_bidding);\n            }\n\n            // response_data.auction_id로 현재 가지고 있는 리스트의 가격을 변경\n          });\n        },\n        error => {\n          // 소켓 연결 실패\n          console.log('소켓 연결 실패', error);\n          this.connected = false;\n        }\n      );        \n    }\n  }\n}\n</script>\n\n<style>\n</style>\n\n"]},"metadata":{},"sourceType":"module"}