{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  name: 'SignupForm',\n\n  data() {\n    return {\n      c_name: null,\n      c_email: null,\n      c_passwd: null,\n      c_phonenum: null,\n      dialog: false,\n      state: 'ins'\n    };\n  },\n\n  methods: {\n    existEmail(c_email) {\n      console.log(c_email);\n      this.$store.dispatch('existEmail', c_email);\n    },\n\n    emailRules: [v => !!v || 'E-mail을 입력해주세요.', v => /.+@.+/.test(v) || '유효하지 않은 형식의 E-mail 입니다.'],\n    user_pw_rule: [v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true, v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.'],\n    user_pw_rule2: [v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true, v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.', v => v === this.user_pw || '패스워드가 일치하지 않습니다.'],\n\n    // emailRule:(c_email) {\n    //     v => !!v || '이메일을 입력해주세요.',\n    //     v => { \n    // const replaceV = v.replace(/(\\s*)/g, '')\n    // const pattern = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/\n    // return pattern.test(replaceV) || '이메일 형식으로 입력해주세요'\n    //     }\n    // },\n    signupConsumer(signupObj) {\n      console.log(this.$store.state.existEmail);\n\n      if (this.$store.state.existEmail) {\n        alert('이메일 중복 확인을 완료해주세요!');\n      } else {\n        console.log(signupObj);\n        axios.post('http://localhost:8080/api/signupConsumer', signupObj).then(res => {\n          console.log(res);\n\n          if (res.data == 0) {\n            alert(\"회원가입 실패..\");\n          } else {\n            alert(\"회원가입 성공..\"); // main으로 넘기기\n\n            console.log(\"main으로!!\");\n            console.log(this.token);\n            console.log(res.data.token);\n            this.token = res.data.token;\n            this.$router.push({\n              name: 'main',\n              params: this.token\n            });\n          }\n        }).catch(err => {\n          console.log(err);\n        });\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"AA4DA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAe;EACdC,IAAI,EAAE,YADQ;;EAEdC,IAAI,GAAG;IACN,OAAO;MACGC,MAAM,EAAE,IADX;MAENC,OAAO,EAAE,IAFH;MAGNC,QAAQ,EAAE,IAHJ;MAINC,UAAU,EAAE,IAJN;MAKGC,MAAM,EAAE,KALX;MAMGC,KAAK,EAAE;IANV,CAAP;EAQA,CAXa;;EAYdC,OAAO,EAAC;IACDC,UAAU,CAACN,OAAD,EAAU;MAChBO,OAAO,CAACC,GAAR,CAAYR,OAAZ;MACT,KAAKS,MAAL,CAAYC,QAAZ,CAAqB,YAArB,EAAmCV,OAAnC;IACA,CAJM;;IAKDW,UAAU,EAAE,CACRC,KAAK,CAAC,CAACA,CAAF,IAAO,iBADJ,EAERA,KAAK,QAAQC,IAAR,CAAaD,CAAb,KAAmB,yBAFhB,CALX;IASDE,YAAY,EAAE,CACVF,KAAK,KAAKR,KAAL,KAAe,KAAf,GAAuB,CAAC,CAACQ,CAAF,IAAO,mBAA9B,GAAoD,IAD/C,EAEVA,KAAK,EAAEA,KAAKA,CAAC,CAACG,MAAF,IAAY,EAAnB,KAA0B,0BAFrB,CATb;IAaDC,aAAa,EAAE,CACXJ,KAAK,KAAKR,KAAL,KAAe,KAAf,GAAuB,CAAC,CAACQ,CAAF,IAAO,mBAA9B,GAAoD,IAD9C,EAEXA,KAAK,EAAEA,KAAKA,CAAC,CAACG,MAAF,IAAY,EAAnB,KAA0B,0BAFpB,EAGXH,KAAKA,MAAM,KAAKK,OAAX,IAAsB,kBAHhB,CAbd;;IAmBD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACNC,cAAc,CAACC,SAAD,EAAY;MAChBZ,OAAO,CAACC,GAAR,CAAY,KAAKC,MAAL,CAAYL,KAAZ,CAAkBE,UAA9B;;MACA,IAAG,KAAKG,MAAL,CAAYL,KAAZ,CAAkBE,UAArB,EAAgC;QAC5Bc,KAAK,CAAC,oBAAD,CAAL;MACJ,CAFA,MAEO;QACHb,OAAO,CAACC,GAAR,CAAYW,SAAZ;QACAvB,KAAK,CAACyB,IAAN,CAAW,0CAAX,EAAuDF,SAAvD,EACCG,IADD,CACMC,GAAE,IAAK;UACThB,OAAO,CAACC,GAAR,CAAYe,GAAZ;;UACA,IAAIA,GAAG,CAACzB,IAAJ,IAAY,CAAhB,EAAkB;YACdsB,KAAK,CAAC,WAAD,CAAL;UACJ,CAFA,MAEO;YACHA,KAAK,CAAC,WAAD,CAAL,CADG,CAEH;;YACAb,OAAO,CAACC,GAAR,CAAY,UAAZ;YACAD,OAAO,CAACC,GAAR,CAAY,KAAKgB,KAAjB;YACAjB,OAAO,CAACC,GAAR,CAAYe,GAAG,CAACzB,IAAJ,CAAS0B,KAArB;YACA,KAAKA,KAAL,GAAaD,GAAG,CAACzB,IAAJ,CAAS0B,KAAtB;YACA,KAAKC,OAAL,CAAaC,IAAb,CAAkB;cAAC7B,IAAI,EAAE,MAAP;cAAe8B,MAAM,EAAE,KAAKH;YAA5B,CAAlB;UACJ;QACH,CAdD,EAeCI,KAfD,CAeOC,GAAE,IAAK;UACVtB,OAAO,CAACC,GAAR,CAAYqB,GAAZ;QACH,CAjBD;MAkBJ;IACV;;EApDO;AAZM,CAAf","names":["axios","name","data","c_name","c_email","c_passwd","c_phonenum","dialog","state","methods","existEmail","console","log","$store","dispatch","emailRules","v","test","user_pw_rule","length","user_pw_rule2","user_pw","signupConsumer","signupObj","alert","post","then","res","token","$router","push","params","catch","err"],"sourceRoot":"","sources":["/home/realvue/src/views/test.vue"],"sourcesContent":["<template>\n<v-form ref=\"form\" lazy-validation>\n  <v-row>\n    <v-col cols=\"12\">\n      <v-text-field \n      \tv-model=\"user_id\" \n        label=\"아이디*\" \n        :rules=\"user_id_rule\" \n        :disabled=\"state == 'ins' ? false : true\"\n        required\n        ></v-text-field>\n    </v-col>\n    <v-col cols=\"12\">\n      <v-text-field \n      \tv-model=\"user_nm\" \n        label=\"이름*\" \n        :rules=\"user_nm_rule\" \n        required\n        ></v-text-field>\n    </v-col>\n    <v-col cols=\"12\">\n      <v-text-field \n      \tv-model=\"user_pw\" \n        label=\"비밀번호*\" \n        type=\"password\" \n        :rules=\"user_pw_rule\"\n        ></v-text-field>\n    </v-col>\n    <v-col cols=\"12\">\n      <v-text-field \n      \tv-model=\"user_pw_chk\" \n        label=\"비밀번호 확인*\" \n        type=\"password\" \n        :rules=\"user_pw_rule2\"\n        ></v-text-field>\n    </v-col>\n    <v-col cols=\"12\">\n      <v-select \n      \tv-model=\"user_auth\" \n        label=\"권한*\" \n        :items=\"authList\" \n        item-text=\"name\" \n        item-value=\"value\" \n        return-object\n        :rules=\"user_auth_rule\"\n        ></v-select>\n    </v-col>\n    <v-col cols=\"12\">\n      <v-text-field \n      \tv-model=\"user_desc\" \n        label=\"설명\" \n        :rules=\"user_desc_rule\"\n        ></v-text-field>\n    </v-col>\n  </v-row>\n</v-form>\n</template>\n\n\n<script>\nimport axios from \"axios\"\n\nexport default {\n\tname: 'SignupForm',\n\tdata() {\n\t\treturn {\n            c_name: null,\n\t\t\tc_email: null,\n\t\t\tc_passwd: null,\n\t\t\tc_phonenum: null,\n            dialog: false,\n            state: 'ins',\n\t\t};\n\t},\n\tmethods:{\n        existEmail(c_email) {\n            console.log(c_email);\n\t\t\tthis.$store.dispatch('existEmail', c_email)\n\t\t},\n        emailRules: [\n            v => !!v || 'E-mail을 입력해주세요.',\n            v => /.+@.+/.test(v) || '유효하지 않은 형식의 E-mail 입니다.',\n        ],\n        user_pw_rule: [\n            v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true,\n            v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.',\n        ],\n        user_pw_rule2: [\n            v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true,\n            v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.',\n            v => v === this.user_pw || '패스워드가 일치하지 않습니다.'\n        ],\n        \n        // emailRule:(c_email) {\n        //     v => !!v || '이메일을 입력해주세요.',\n        //     v => { \n        // const replaceV = v.replace(/(\\s*)/g, '')\n        // const pattern = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/\n        // return pattern.test(replaceV) || '이메일 형식으로 입력해주세요'\n        //     }\n        // },\n\t\tsignupConsumer(signupObj) {\n            console.log(this.$store.state.existEmail);\n            if(this.$store.state.existEmail){\n                alert('이메일 중복 확인을 완료해주세요!')\n            } else {\n                console.log(signupObj);\n                axios.post('http://localhost:8080/api/signupConsumer', signupObj) \n                .then(res => {\n                    console.log(res);\n                    if (res.data == 0){\n                        alert(\"회원가입 실패..\")\n                    } else {\n                        alert(\"회원가입 성공..\")\n                        // main으로 넘기기\n                        console.log(\"main으로!!\");\n                        console.log(this.token);\n                        console.log(res.data.token);\n                        this.token = res.data.token;\n                        this.$router.push({name: 'main', params: this.token});\n                    }\n                })\n                .catch(err => {\n                    console.log(err);\n                });\n            }\n\t\t}\n\t},\n};\n\n</script>\n\n\n\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module"}