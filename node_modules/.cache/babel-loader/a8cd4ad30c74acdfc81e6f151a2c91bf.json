{"ast":null,"code":"export default {\n  components: {},\n  props: {\n    columns: Array,\n    rows: Array,\n    perpage: Number\n  },\n\n  data() {\n    return {\n      formatrow: this.rows,\n      sort: \"Asc\",\n      currentPage: 1,\n      currentindex: 0\n    };\n  },\n\n  created() {\n    // format the value using the column's 'formatValue' method\n    for (let i = 0; i < this.formatrow.length; i++) {\n      for (let j = 0; j < this.columns.length; j++) {\n        try {\n          this.formatrow[i][this.columns[j][\"dataKey\"]] = this.columns[j].formatValue(this.formatrow[i][this.columns[j][\"dataKey\"]]);\n        } catch (e) {\n          console.log(\"'formatValue' method is not present in data key:\", this.columns[j][\"dataKey\"]);\n          continue;\n        }\n      }\n    }\n\n    this.onPageChange(1);\n  },\n\n  computed: {\n    // retrun the total page number\n    numberPages() {\n      return Math.ceil(this.rows.length / this.perpage);\n    },\n\n    // get the row data for specific page\n    rowfilters() {\n      return this.formatrow.slice(this.currentindex, this.currentindex + this.perpage);\n    }\n\n  },\n  methods: {\n    sortBy(prop) {\n      if (this.sort === \"Asc\") {\n        this.formatrow.sort((a, b) => a[prop] < b[prop] ? -1 : 1);\n        this.sort = \"Desc\";\n      } else if (this.sort === \"Desc\") {\n        this.formatrow.sort((a, b) => a[prop] > b[prop] ? -1 : 1);\n        this.sort = \"Asc\";\n      }\n    },\n\n    onPageChange(value) {\n      this.currentPage = value;\n      this.currentindex = value * this.perpage - this.perpage;\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAgHA,eAAe;EACbA,UAAU,EAAE,EADC;EAEbC,KAAK,EAAE;IACLC,OAAO,EAAEC,KADJ;IAELC,IAAI,EAAED,KAFD;IAGLE,OAAO,EAAEC;EAHJ,CAFM;;EAObC,IAAI,GAAG;IACL,OAAO;MACLC,SAAS,EAAE,KAAKJ,IADX;MAELK,IAAI,EAAE,KAFD;MAGLC,WAAW,EAAE,CAHR;MAILC,YAAY,EAAE;IAJT,CAAP;EAMD,CAdY;;EAebC,OAAO,GAAG;IACR;IACA,KAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKL,SAAL,CAAeM,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;MAC9C,KAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAI,KAAKb,OAAL,CAAaY,MAAjC,EAAyCC,CAAC,EAA1C,EAA8C;QAC5C,IAAI;UACF,KAAKP,SAAL,CAAeK,CAAf,EAAkB,KAAKX,OAAL,CAAaa,CAAb,EAAgB,SAAhB,CAAlB,IAAgD,KAAKb,OAAL,CAAaa,CAAb,EAAgBC,WAAhB,CAA4B,KAAKR,SAAL,CAAeK,CAAf,EAAkB,KAAKX,OAAL,CAAaa,CAAb,EAAgB,SAAhB,CAAlB,CAA5B,CAAhD;QACF,CAFA,CAEE,OAAOE,CAAP,EAAU;UACVC,OAAO,CAACC,GAAR,CAAY,kDAAZ,EAAgE,KAAKjB,OAAL,CAAaa,CAAb,EAAgB,SAAhB,CAAhE;UACA;QACF;MACF;IACF;;IACA,KAAKK,YAAL,CAAkB,CAAlB;EACD,CA5BY;;EA6BbC,QAAQ,EAAE;IACR;IACAC,WAAW,GAAG;MACZ,OAAOC,IAAI,CAACC,IAAL,CAAU,KAAKpB,IAAL,CAAUU,MAAV,GAAmB,KAAKT,OAAlC,CAAP;IACD,CAJO;;IAKR;IACAoB,UAAU,GAAG;MACX,OAAO,KAAKjB,SAAL,CAAekB,KAAf,CAAqB,KAAKf,YAA1B,EAAwC,KAAKA,YAAL,GAAoB,KAAKN,OAAjE,CAAP;IACD;;EARO,CA7BG;EAuCbsB,OAAO,EAAE;IACPC,MAAM,CAACC,IAAD,EAAO;MACX,IAAI,KAAKpB,IAAL,KAAc,KAAlB,EAAyB;QACvB,KAAKD,SAAL,CAAeC,IAAf,CAAoB,CAACqB,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACD,IAAD,CAAD,GAAUE,CAAC,CAACF,IAAD,CAAX,GAAoB,CAAC,CAArB,GAAyB,CAAxD;QACA,KAAKpB,IAAL,GAAY,MAAZ;MACF,CAHA,MAGO,IAAI,KAAKA,IAAL,KAAc,MAAlB,EAA0B;QAC/B,KAAKD,SAAL,CAAeC,IAAf,CAAoB,CAACqB,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACD,IAAD,CAAD,GAAUE,CAAC,CAACF,IAAD,CAAX,GAAoB,CAAC,CAArB,GAAyB,CAAxD;QACA,KAAKpB,IAAL,GAAY,KAAZ;MACF;IACD,CATM;;IAUPW,YAAY,CAACY,KAAD,EAAQ;MAClB,KAAKtB,WAAL,GAAmBsB,KAAnB;MACA,KAAKrB,YAAL,GAAoBqB,KAAI,GAAI,KAAK3B,OAAb,GAAuB,KAAKA,OAAhD;IACD;;EAbM;AAvCI,CAAf","names":["components","props","columns","Array","rows","perpage","Number","data","formatrow","sort","currentPage","currentindex","created","i","length","j","formatValue","e","console","log","onPageChange","computed","numberPages","Math","ceil","rowfilters","slice","methods","sortBy","prop","a","b","value"],"sourceRoot":"","sources":["/home/realvue/src/views/test.vue"],"sourcesContent":["<template>\n  <v-main class=\"ma-5\">\n    <v-container class=\"grey lighten-3\">\n      <v-card flat class=\"pa-3\" justify=\"space-between\">\n        <!-- Table to display -->\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th\n                class=\"text-left\"\n                v-for=\"column in columns\"\n                :key=\"column.dataKey\"\n              >\n                <v-btn\n                  text\n                  block\n                  x-large\n                  depressed\n                  @click=\"sortBy(column.dataKey)\"\n                >\n                  <span class=\"caption text-capitalize\">\n                    <h2>{{ column.name }}</h2>\n                  </span>\n                  <v-icon right>mdi-sort</v-icon>\n                </v-btn>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"row in rowfilters\" :key=\"row.code\">\n              <td\n                v-for=\"column in columns\"\n                :key=\"column.dataKey\"\n                :class=\"column.align\"\n              >\n                {{ row[column.dataKey] }}\n              </td>\n            </tr>\n          </tbody>\n        </table>\n\n        <!-- Another way to display the data table by using <v-simple-table> -->\n\n        <!-- <v-simple-table>\n          <template v-slot:default>\n            <thead>\n              <th\n                class=\"text-left\"\n                v-for=\"column in columns\"\n                :key=\"column.dataKey\"\n              >\n                <v-btn\n                  text\n                  depressed\n                  class=\"white\"\n                  @click=\"sortBy(column.dataKey)\"\n                >\n                  <span class=\"caption text-capitalize\">{{ column.name }}</span>\n                  <v-icon right x-small>mdi-sort</v-icon>\n                </v-btn>\n              </th>\n            </thead>\n            <tbody>\n              <tr v-for=\"row in rowfilters\" :key=\"row.code\">\n                <td\n                  v-for=\"column in columns\"\n                  :key=\"column.dataKey\"\n                  :class=\"column.align\"\n                >\n                  {{ row[column.dataKey] }}\n                </td>\n              </tr>\n            </tbody>\n          </template>\n        </v-simple-table> -->\n\n      </v-card>\n\n      <!-- Bottom Pagination -->\n      <div class=\"text-center\">\n        <v-container>\n          <v-row justify=\"start\">\n            <v-col cols=\"auto\">\n              <v-container calss=\"red\">\n                <v-layout row warp>\n                  <v-pagination\n                    v-model=\"currentPage\"\n                    :length=\"numberPages\"\n                    total-visible=\"9\"\n                    @input=\"onPageChange\"\n                  ></v-pagination>\n                </v-layout>\n              </v-container>\n            </v-col>\n            <v-layout shrink class=\"align-center\">\n              <v-flex warp>\n                <div>{{ numberPages }} pages</div>\n              </v-flex>\n            </v-layout>\n            <v-layout shrink class=\"align-center ml-3\">\n              <v-flex warp>\n                <div>({{ rows.length }} results)</div>\n              </v-flex>\n            </v-layout>\n          </v-row>\n        </v-container>\n      </div>\n    </v-container>\n  </v-main>\n</template>\n\n<script>\nexport default {\n  components: {},\n  props: {\n    columns: Array,\n    rows: Array,\n    perpage: Number,\n  },\n  data() {\n    return {\n      formatrow: this.rows,\n      sort: \"Asc\",\n      currentPage: 1,\n      currentindex: 0,\n    };\n  },\n  created() {\n    // format the value using the column's 'formatValue' method\n    for (let i = 0; i < this.formatrow.length; i++) {\n      for (let j = 0; j < this.columns.length; j++) {\n        try {\n          this.formatrow[i][this.columns[j][\"dataKey\"]] = this.columns[j].formatValue(this.formatrow[i][this.columns[j][\"dataKey\"]]);\n        } catch (e) {\n          console.log(\"'formatValue' method is not present in data key:\", this.columns[j][\"dataKey\"]);\n          continue;\n        }\n      }\n    }\n    this.onPageChange(1);\n  },\n  computed: {\n    // retrun the total page number\n    numberPages() {\n      return Math.ceil(this.rows.length / this.perpage);\n    },\n    // get the row data for specific page\n    rowfilters() {\n      return this.formatrow.slice(this.currentindex, this.currentindex + this.perpage);\n    },\n  },\n  methods: {\n    sortBy(prop) {\n      if (this.sort === \"Asc\") {\n        this.formatrow.sort((a, b) => (a[prop] < b[prop] ? -1 : 1));\n        this.sort = \"Desc\";\n      } else if (this.sort === \"Desc\") {\n        this.formatrow.sort((a, b) => (a[prop] > b[prop] ? -1 : 1));\n        this.sort = \"Asc\";\n      }\n    },\n    onPageChange(value) {\n      this.currentPage = value;\n      this.currentindex = value * this.perpage - this.perpage;\n    },\n  },\n};\n</script>\n\n<style scoped>\ntable {\n  display: table;\n  border-collapse: separate;\n  border-spacing: 2px;\n  border-color: gray;\n  width: 100%;\n}\nth {\n  border-bottom: 2px solid #ddd;\n  text-align: left;\n}\ntd.left {\n  text-align: left;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  padding-left: 10px;\n  padding-right: 10px;\n}\ntd.right {\n  text-align: right;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  padding-left: 10px;\n  padding-right: 10px;\n}\ntd.center {\n  text-align: center;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  padding-left: 10px;\n  padding-right: 10px;\n}\ntr:nth-child(even) {\n  background-color: #f2f2f2;\n}\n</style>"]},"metadata":{},"sourceType":"module"}