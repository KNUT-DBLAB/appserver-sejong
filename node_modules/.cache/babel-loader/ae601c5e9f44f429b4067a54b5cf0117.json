{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  name: 'SignupForm',\n\n  data() {\n    return {\n      c_name: null,\n      c_email: null,\n      c_passwd: null,\n      c_phonenum: null,\n      dialog: false,\n      state: 'ins',\n      authList: [{\n        name: '관리자',\n        value: 'A'\n      }, {\n        name: '일반 사용자',\n        value: 'M'\n      }],\n      c_email: '',\n      emailRules: [v => !!v || '이메일은 필수 입력사항입니다.', v => /.+@.+/.test(v) || '유효하지 않은 형식의 E-mail 입니다.' // v => this.existEmail(v) || '중복된'\n      ],\n      c_name: '',\n      c_name_rule: [v => !!v || '이름은 필수 입력사항입니다.', v => !(v && v.length >= 10) || '이름은 10자 이상 입력할 수 없습니다.', v => !/[~!@#$%^&*()_+|<>?:{}]/.test(v) || '이름에는 특수문자를 사용할 수 없습니다.'],\n      c_passwd: '',\n      c_passwd_chk: '',\n      c_passwd_rule: [v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true, v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.'],\n      c_passwd_rule2: [v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true, v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.', v => v === this.c_passwd || '패스워드가 일치하지 않습니다.'],\n      user_auth: '',\n      user_auth_rule: [v => !!v || '권한은 필수 선택 사항입니다.'],\n      c_phonenum: '',\n      c_phonenum_rule: [v => this.state === 'ins' ? !!v || '핸드폰 번호는 필수 입력사항입니다.' : true, v => !(v && v.length >= 12) || '핸드폰 번호는 12자 이상 입력할 수 업습니다.', v => /[0-9]/.test(v) || '숫자만 입력해주세요']\n    };\n  },\n\n  methods: {\n    //         async save() {\n    //   const validate = this.$refs.form.validate();\n    //   if (validate) {\n    //     if (confirm ('저장하시겠습니까?')) {\n    //       const params = {\n    //         user_id: this.user_id,\n    //         user_nm: this.user_nm,\n    //         user_pw: this.user_pw,\n    //         user_auth_code: this.user_auth.value,\n    //         user_auth_nm: this.user_auth.name,\n    //         user_desc: this.user_desc\n    //       }\n    //       if (this.state == 'upd') {\n    //         params._id = this.user_info._id;\n    //         params.user_mk_dt = this.user_info.user_mk_dt;\n    //       }\n    //       try {\n    //         const url = (this.state == 'ins' ? 'setting/user/insertUser' : 'setting/user/updateUser');\n    //         const rs = await this.$store.dispatch(url, params);\n    //         if (rs.data.result.error == false) {\n    //           this.$store.dispatch('setting/user/initUserList');\n    //           this.close();\n    //         }\n    //       } catch (err) {\n    //         alert(err);\n    //       }\n    //     }\n    //   }\n    // },\n    // close() {\n    //   this.dialog = false;\n    //   this.state = 'ins';\n    //   this.$refs.form.reset();\n    // },\n    existEmail(c_email) {\n      this.$store.dispatch('existEmail', c_email);\n      console.log(c_email);\n\n      if (c_email == c_email) {}\n    },\n\n    async signupConsumer() {\n      let validate;\n      await this.$refs.form.validate().then(res => {\n        validate = res.valid;\n        console.log(res);\n      }).catch(err => {\n        console.log(err);\n      });\n      console.log(validate);\n      console.log(this.$store.state.existEmail);\n\n      if (!validate) {\n        console.log(\"다른 거 확인하길 바람\");\n      } else if (this.$store.state.existEmail) {\n        alert('이메일 중복 확인을 완료해주세요!');\n      } else {\n        console.log();\n        axios.post('http://localhost:8080/api/signupConsumer', signupObj).then(res => {\n          console.log(res);\n\n          if (res.data == 0) {\n            alert(\"회원가입 실패..\");\n          } else {\n            alert(\"회원가입 성공..\"); // main으로 넘기기\n\n            console.log(\"main으로!!\");\n            console.log(this.token);\n            console.log(res.data.token);\n            this.token = res.data.token;\n            this.$router.push({\n              name: 'main',\n              params: this.token\n            });\n          }\n        }).catch(err => {\n          console.log(err);\n        });\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["axios","name","data","c_name","c_email","c_passwd","c_phonenum","dialog","state","authList","value","emailRules","v","test","c_name_rule","length","c_passwd_chk","c_passwd_rule","c_passwd_rule2","user_auth","user_auth_rule","c_phonenum_rule","methods","existEmail","$store","dispatch","console","log","signupConsumer","validate","$refs","form","then","res","valid","catch","err","alert","post","signupObj","token","$router","push","params"],"sourceRoot":"","sources":["/home/realvue/src/views/test.vue"],"sourcesContent":["<template>\n<div>\n    <header class=\"welcome-header\">\n    <h1 class=\"welcome-header__title\">회 원 가 입</h1>\n</header>\n    <v-form ref=\"form\" lazy-validation @submit.prevent=\"SignupForm\">\n        <v-row>\n            <v-col cols=\"12\">\n            <v-text-field v-model=\"c_name\" label=\"이름*\" :rules=\"c_name_rule\" required></v-text-field>\n            </v-col>\n            <v-col cols=\"12\">\n                <v-text-field v-model=\"c_email\" label=\"이메일*\" :rules=\"emailRules\"\n                    :disabled=\"state == 'ins' ? false : true\" required></v-text-field>\n            </v-col>\n\n            <button class=\"login-form__btn_right\" @click=\"existEmail(c_email)\">이메일 중복 검사</button>\n\n            <v-col cols=\"12\">\n                <v-text-field v-model=\"c_passwd\" label=\"비밀번호*\" type=\"password\" :rules=\"c_passwd_rule\"></v-text-field>\n            </v-col>\n            <v-col cols=\"12\">\n                <v-text-field v-model=\"c_passwd_chk\" label=\"비밀번호 확인*\" type=\"password\" :rules=\"c_passwd_rule2\">\n                </v-text-field>\n            </v-col>\n            <v-col cols=\"12\">\n                <v-text-field v-model=\"c_phonenum\" label=\"핸드폰 번호\" :rules=\"c_phonenum_rule\"></v-text-field>\n            </v-col>\n            <v-col cols=\"12\">\n                <v-select v-model=\"user_auth\" label=\"권한*\" :items=\"authList\" item-text=\"name\" item-value=\"value\"\n                    return-object :rules=\"user_auth_rule\"></v-select>\n            </v-col>\n        </v-row>\n\n        <button class=\"login-form__btn_right\"\n            @click=\"signupConsumer()\">다음</button>\n            \n    </v-form>\n</div>\n\n</template>\n\n\n<script>\nimport axios from \"axios\"\n\nexport default {\n    name: 'SignupForm',\n    data() {\n        return {\n            c_name: null,\n            c_email: null,\n            c_passwd: null,\n            c_phonenum: null,\n            dialog: false,\n            state: 'ins',\n            authList: [\n                { name: '관리자', value: 'A' },\n                { name: '일반 사용자', value: 'M' }\n            ],\n            c_email: '',\n            emailRules: [\n                v => !!v || '이메일은 필수 입력사항입니다.',\n                v => /.+@.+/.test(v) || '유효하지 않은 형식의 E-mail 입니다.',\n                // v => this.existEmail(v) || '중복된'\n            ],\n            c_name: '',\n            c_name_rule: [\n                v => !!v || '이름은 필수 입력사항입니다.',\n                v => !(v && v.length >= 10) || '이름은 10자 이상 입력할 수 없습니다.',\n                v => !/[~!@#$%^&*()_+|<>?:{}]/.test(v) || '이름에는 특수문자를 사용할 수 없습니다.'\n            ],\n            c_passwd: '',\n            c_passwd_chk: '',\n            c_passwd_rule: [\n                v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true,\n                v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.',\n            ],\n            c_passwd_rule2: [\n                v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true,\n                v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.',\n                v => v === this.c_passwd || '패스워드가 일치하지 않습니다.'\n            ],\n            user_auth: '',\n            user_auth_rule: [\n                v => !!v || '권한은 필수 선택 사항입니다.'\n            ],\n            c_phonenum: '',\n            c_phonenum_rule: [\n                v => this.state === 'ins' ? !!v || '핸드폰 번호는 필수 입력사항입니다.' : true,\n                v => !(v && v.length >= 12) || '핸드폰 번호는 12자 이상 입력할 수 업습니다.',\n                v => /[0-9]/.test(v) || '숫자만 입력해주세요'\n            ] \n        }\n    },\n    methods:{\n    //         async save() {\n    //   const validate = this.$refs.form.validate();\n    //   if (validate) {\n    //     if (confirm ('저장하시겠습니까?')) {\n    //       const params = {\n    //         user_id: this.user_id,\n    //         user_nm: this.user_nm,\n    //         user_pw: this.user_pw,\n    //         user_auth_code: this.user_auth.value,\n    //         user_auth_nm: this.user_auth.name,\n    //         user_desc: this.user_desc\n    //       }\n    //       if (this.state == 'upd') {\n    //         params._id = this.user_info._id;\n    //         params.user_mk_dt = this.user_info.user_mk_dt;\n  \n    //       }\n    //       try {\n    //         const url = (this.state == 'ins' ? 'setting/user/insertUser' : 'setting/user/updateUser');\n    //         const rs = await this.$store.dispatch(url, params);\n    //         if (rs.data.result.error == false) {\n    //           this.$store.dispatch('setting/user/initUserList');\n    //           this.close();\n    //         }\n    //       } catch (err) {\n    //         alert(err);\n    //       }\n    //     }\n    //   }\n    // },\n    // close() {\n    //   this.dialog = false;\n    //   this.state = 'ins';\n    //   this.$refs.form.reset();\n    // },\n    existEmail(c_email) {\n        this.$store.dispatch('existEmail', c_email)\n        console.log(c_email);\n        if(c_email == c_email){\n\n        }\n    },\n    async signupConsumer() {\n        let validate;\n        await this.$refs.form.validate().then( res => {\n            validate = res.valid\n            console.log(res);\n        }).catch(err => {\n            console.log(err);\n        });\n        console.log(validate);\n        console.log(this.$store.state.existEmail);\n        if(!validate){\n            console.log(\"다른 거 확인하길 바람\");\n        } else if (this.$store.state.existEmail) {\n            alert('이메일 중복 확인을 완료해주세요!')\n        } else {\n            console.log();\n            axios.post('http://localhost:8080/api/signupConsumer', signupObj)\n                .then(res => {\n                    console.log(res);\n                    if (res.data == 0) {\n                        alert(\"회원가입 실패..\")\n                    } else {\n                        alert(\"회원가입 성공..\")\n                        // main으로 넘기기\n                        console.log(\"main으로!!\");\n                        console.log(this.token);\n                        console.log(res.data.token);\n                        this.token = res.data.token;\n                        this.$router.push({ name: 'main', params: this.token });\n                    }\n                })\n                .catch(err => {\n                    console.log(err);\n                });\n        }\n    }}\n}\n</script>\n\n\n\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module"}