{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  name: 'SignupForm',\n\n  data() {\n    return {\n      c_name: null,\n      c_email: null,\n      c_passwd: null,\n      c_phonenum: null,\n      dialog: false,\n      state: 'ins',\n      authList: [{\n        name: '관리자',\n        value: 'A'\n      }, {\n        name: '일반 사용자',\n        value: 'M'\n      }],\n      user_id: '',\n      emailRules: [v => !!v || 'E-mail을 입력해주세요.', v => /.+@.+/.test(v) || '유효하지 않은 형식의 E-mail 입니다.'],\n      user_nm: '',\n      user_nm_rule: [v => !!v || '이름은 필수 입력사항입니다.', v => !(v && v.length >= 30) || '이름은 30자 이상 입력할 수 없습니다.', v => !/[~!@#$%^&*()_+|<>?:{}]/.test(v) || '이름에는 특수문자를 사용할 수 없습니다.'],\n      user_pw: '',\n      user_pw_chk: '',\n      user_pw_rule: [v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true, v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.'],\n      user_pw_rule2: [v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true, v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.', v => v === this.user_pw || '패스워드가 일치하지 않습니다.'],\n      user_auth: '',\n      user_auth_rule: [v => !!v || '권한은 필수 선택 사항입니다.'],\n      user_desc: '',\n      user_desc_rule: [v => !(v && v.length >= 100) || '설명은 100자 이상 입력할 수 업습니다.']\n    };\n  },\n\n  existEmail(c_email) {\n    console.log(c_email);\n    this.$store.dispatch('existEmail', c_email);\n  },\n\n  emailRules: [v => !!v || 'E-mail을 입력해주세요.', v => /.+@.+/.test(v) || '유효하지 않은 형식의 E-mail 입니다.'],\n  c_passwd: '',\n  c_passwd_chk: '',\n  user_pw_rule: [v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true, v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.'],\n  user_pw_rule2: [v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true, v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.', v => v === this.user_pw || '패스워드가 일치하지 않습니다.'],\n\n  signupConsumer(signupObj) {\n    const validate = this.$refs.form.validate();\n    console.log(this.$store.state.existEmail);\n\n    if (this.$store.state.existEmail) {\n      alert('이메일 중복 확인을 완료해주세요!');\n    } else {\n      console.log(signupObj);\n      axios.post('http://localhost:8080/api/signupConsumer', signupObj).then(res => {\n        console.log(res);\n\n        if (res.data == 0) {\n          alert(\"회원가입 실패..\");\n        } else {\n          alert(\"회원가입 성공..\"); // main으로 넘기기\n\n          console.log(\"main으로!!\");\n          console.log(this.token);\n          console.log(res.data.token);\n          this.token = res.data.token;\n          this.$router.push({\n            name: 'main',\n            params: this.token\n          });\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  }\n\n};","map":{"version":3,"mappings":"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","names":["axios","name","data","c_name","c_email","c_passwd","c_phonenum","dialog","state","authList","value","user_id","emailRules","v","test","user_nm","user_nm_rule","length","user_pw","user_pw_chk","user_pw_rule","user_pw_rule2","user_auth","user_auth_rule","user_desc","user_desc_rule","existEmail","console","log","$store","dispatch","c_passwd_chk","signupConsumer","signupObj","validate","$refs","form","alert","post","then","res","token","$router","push","params","catch","err"],"sourceRoot":"","sources":["/home/realvue/src/views/test.vue"],"sourcesContent":["<template>\n    <v-form ref=\"form\" lazy-validation @submit.prevent=\"SignupForm\">\n        <v-row>\n            <v-col cols=\"12\">\n                <v-text-field v-model=\"user_nm\" label=\"이름*\" :rules=\"user_nm_rule\" required></v-text-field>\n            </v-col>\n            <v-col cols=\"12\">\n                <v-text-field v-model=\"user_id\" label=\"아이디*\" :rules=\"emailRules\"\n                    :disabled=\"state == 'ins' ? false : true\" required></v-text-field>\n            </v-col>\n\n            <v-col cols=\"12\">\n                <v-text-field v-model=\"user_pw\" label=\"비밀번호*\" type=\"password\" :rules=\"user_pw_rule\"></v-text-field>\n            </v-col>\n            <v-col cols=\"12\">\n                <v-text-field v-model=\"user_pw_chk\" label=\"비밀번호 확인*\" type=\"password\" :rules=\"user_pw_rule2\">\n                </v-text-field>\n            </v-col>\n            <v-col cols=\"12\">\n                <v-select v-model=\"user_auth\" label=\"권한*\" :items=\"authList\" item-text=\"name\" item-value=\"value\"\n                    return-object :rules=\"user_auth_rule\"></v-select>\n            </v-col>\n            <v-col cols=\"12\">\n                <v-text-field v-model=\"user_desc\" label=\"설명\" :rules=\"user_desc_rule\"></v-text-field>\n            </v-col>\n        </v-row>\n\n        <button class=\"login-form__btn_right\"\n            @click=\"signupConsumer({c_name, c_email, c_passwd, c_phonenum})\">다음</button>\n    </v-form>\n</template>\n\n\n<script>\n    import axios from \"axios\"\n\n    export default {\n        name: 'SignupForm',\n        data() {\n            return {\n                c_name: null,\n                c_email: null,\n                c_passwd: null,\n                c_phonenum: null,\n                dialog: false,\n                state: 'ins',\n                authList: [\n                    { name: '관리자', value: 'A' },\n                    { name: '일반 사용자', value: 'M' }\n                ],\n                user_id: '',\n                emailRules: [\n                    v => !!v || 'E-mail을 입력해주세요.',\n                    v => /.+@.+/.test(v) || '유효하지 않은 형식의 E-mail 입니다.',\n                ],\n                user_nm: '',\n                user_nm_rule: [\n                    v => !!v || '이름은 필수 입력사항입니다.',\n                    v => !(v && v.length >= 30) || '이름은 30자 이상 입력할 수 없습니다.',\n                    v => !/[~!@#$%^&*()_+|<>?:{}]/.test(v) || '이름에는 특수문자를 사용할 수 없습니다.'\n                ],\n                user_pw: '',\n                user_pw_chk: '',\n                user_pw_rule: [\n                    v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true,\n                    v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.',\n                ],\n                user_pw_rule2: [\n                    v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true,\n                    v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.',\n                    v => v === this.user_pw || '패스워드가 일치하지 않습니다.'\n                ],\n                user_auth: '',\n                user_auth_rule: [\n                    v => !!v || '권한은 필수 선택 사항입니다.'\n                ],\n                user_desc: '',\n                user_desc_rule: [\n                    v => !(v && v.length >= 100) || '설명은 100자 이상 입력할 수 업습니다.'\n                ]\n            }\n        },\n        existEmail(c_email) {\n            console.log(c_email);\n            this.$store.dispatch('existEmail', c_email)\n        },\n        emailRules: [\n            v => !!v || 'E-mail을 입력해주세요.',\n            v => /.+@.+/.test(v) || '유효하지 않은 형식의 E-mail 입니다.',\n        ],\n        c_passwd: '',\n        c_passwd_chk: '',\n        user_pw_rule: [\n            v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true,\n            v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.',\n        ],\n        user_pw_rule2: [\n            v => this.state === 'ins' ? !!v || '패스워드는 필수 입력사항입니다.' : true,\n            v => !(v && v.length >= 30) || '패스워드는 30자 이상 입력할 수 없습니다.',\n            v => v === this.user_pw || '패스워드가 일치하지 않습니다.'\n        ],\n\n        signupConsumer(signupObj) {\n            const validate = this.$refs.form.validate();\n            console.log(this.$store.state.existEmail);\n            if (this.$store.state.existEmail) {\n                alert('이메일 중복 확인을 완료해주세요!')\n            } else {\n                console.log(signupObj);\n                axios.post('http://localhost:8080/api/signupConsumer', signupObj)\n                    .then(res => {\n                        console.log(res);\n                        if (res.data == 0) {\n                            alert(\"회원가입 실패..\")\n                        } else {\n                            alert(\"회원가입 성공..\")\n                            // main으로 넘기기\n                            console.log(\"main으로!!\");\n                            console.log(this.token);\n                            console.log(res.data.token);\n                            this.token = res.data.token;\n                            this.$router.push({ name: 'main', params: this.token });\n                        }\n                    })\n                    .catch(err => {\n                        console.log(err);\n                    });\n            }\n        }\n    }\n        ;\n\n</script>\n\n\n\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module"}