{"ast":null,"code":"import { effectScope, onScopeDispose, readonly, ref, toRaw, watch, watchEffect } from 'vue';\nimport { getCurrentInstance } from \"../util/index.mjs\"; // Types\n\nconst stack = ref([]);\nexport function useStack(isActive) {\n  const vm = getCurrentInstance('useStack');\n  let scope;\n  watch(isActive, val => {\n    if (val) {\n      scope = effectScope();\n      scope.run(() => {\n        stack.value.push(vm);\n        onScopeDispose(() => {\n          const idx = stack.value.indexOf(vm);\n          stack.value.splice(idx, 1);\n        });\n      });\n    } else {\n      var _scope;\n\n      (_scope = scope) == null ? void 0 : _scope.stop();\n    }\n  }, {\n    immediate: true\n  });\n  const isTop = ref(true);\n  watchEffect(() => {\n    const _isTop = toRaw(stack.value[stack.value.length - 1]) === vm;\n\n    setTimeout(() => isTop.value = _isTop);\n  });\n  return {\n    isTop: readonly(isTop)\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,EAAsCC,QAAtC,EAAgDC,GAAhD,EAAqDC,KAArD,EAA4DC,KAA5D,EAAmEC,WAAnE,QAAsF,KAAtF;SACSC,0B,qBAET;;AAGA,MAAMC,KAAK,GAAGL,GAAG,CAA8B,EAA9B,CAAjB;AAEA,OAAO,SAASM,QAAT,CAAmBC,QAAnB,EAA2C;EAChD,MAAMC,EAAE,GAAGJ,kBAAkB,CAAC,UAAD,CAA7B;EACA,IAAIK,KAAJ;EACAP,KAAK,CAACK,QAAD,EAAWG,GAAG,IAAI;IACrB,IAAIA,GAAJ,EAAS;MACPD,KAAK,GAAGZ,WAAW,EAAnBY;MACAA,KAAK,CAACE,GAANF,CAAU,MAAM;QACdJ,KAAK,CAACO,KAANP,CAAYQ,IAAZR,CAAiBG,EAAjBH;QAEAP,cAAc,CAAC,MAAM;UACnB,MAAMgB,GAAG,GAAGT,KAAK,CAACO,KAANP,CAAYU,OAAZV,CAAoBG,EAApBH,CAAZ;UACAA,KAAK,CAACO,KAANP,CAAYW,MAAZX,CAAmBS,GAAnBT,EAAwB,CAAxBA;QAFY,EAAdP;MAHF;IAFF,OAUO;MAAA;;MACL,oBAAK,IAAL,mBAAOmB,IAAP;IACD;EAbE,GAcF;IAAEC,SAAS,EAAE;EAAb,CAdE,CAALhB;EAgBA,MAAMiB,KAAK,GAAGnB,GAAG,CAAC,IAAD,CAAjB;EACAG,WAAW,CAAC,MAAM;IAChB,MAAMiB,MAAM,GAAGnB,KAAK,CAACI,KAAK,CAACO,KAANP,CAAYA,KAAK,CAACO,KAANP,CAAYgB,MAAZhB,GAAqB,CAAjCA,CAAD,CAALJ,KAA+CO,EAA9D;;IACAc,UAAU,CAAC,MAAMH,KAAK,CAACP,KAANO,GAAcC,MAArB,CAAVE;EAFS,EAAXnB;EAKA,OAAO;IACLgB,KAAK,EAAEpB,QAAQ,CAACoB,KAAD;EADV,CAAP;AAGD","names":["effectScope","onScopeDispose","readonly","ref","toRaw","watch","watchEffect","getCurrentInstance","stack","useStack","isActive","vm","scope","val","run","value","push","idx","indexOf","splice","stop","immediate","isTop","_isTop","length","setTimeout"],"sources":["../../src/composables/stack.ts"],"sourcesContent":["import { effectScope, onScopeDispose, readonly, ref, toRaw, watch, watchEffect } from 'vue'\nimport { getCurrentInstance } from '@/util'\n\n// Types\nimport type { ComponentInternalInstance, EffectScope, Ref } from 'vue'\n\nconst stack = ref<ComponentInternalInstance[]>([])\n\nexport function useStack (isActive: Ref<boolean>) {\n  const vm = getCurrentInstance('useStack')\n  let scope: EffectScope | undefined\n  watch(isActive, val => {\n    if (val) {\n      scope = effectScope()\n      scope.run(() => {\n        stack.value.push(vm)\n\n        onScopeDispose(() => {\n          const idx = stack.value.indexOf(vm)\n          stack.value.splice(idx, 1)\n        })\n      })\n    } else {\n      scope?.stop()\n    }\n  }, { immediate: true })\n\n  const isTop = ref(true)\n  watchEffect(() => {\n    const _isTop = toRaw(stack.value[stack.value.length - 1]) === vm\n    setTimeout(() => isTop.value = _isTop)\n  })\n\n  return {\n    isTop: readonly(isTop),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}